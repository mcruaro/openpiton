#line 2 "V3PreLex_pregen.yy.cpp"

#line 4 "V3PreLex_pregen.yy.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer V3PreLex_create_buffer
#define yy_delete_buffer V3PreLex_delete_buffer
#define yy_scan_buffer V3PreLex_scan_buffer
#define yy_scan_string V3PreLex_scan_string
#define yy_scan_bytes V3PreLex_scan_bytes
#define yy_init_buffer V3PreLex_init_buffer
#define yy_flush_buffer V3PreLex_flush_buffer
#define yy_load_buffer_state V3PreLex_load_buffer_state
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#define yypush_buffer_state V3PreLexpush_buffer_state
#define yypop_buffer_state V3PreLexpop_buffer_state
#define yyensure_buffer_stack V3PreLexensure_buffer_stack
#define yy_flex_debug V3PreLex_flex_debug
#define yyin V3PreLexin
#define yyleng V3PreLexleng
#define yylex V3PreLexlex
#define yylineno V3PreLexlineno
#define yyout V3PreLexout
#define yyrestart V3PreLexrestart
#define yytext V3PreLextext
#define yywrap V3PreLexwrap
#define yyalloc V3PreLexalloc
#define yyrealloc V3PreLexrealloc
#define yyfree V3PreLexfree

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define V3PreLex_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer V3PreLex_create_buffer
#endif

#ifdef yy_delete_buffer
#define V3PreLex_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer V3PreLex_delete_buffer
#endif

#ifdef yy_scan_buffer
#define V3PreLex_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer V3PreLex_scan_buffer
#endif

#ifdef yy_scan_string
#define V3PreLex_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string V3PreLex_scan_string
#endif

#ifdef yy_scan_bytes
#define V3PreLex_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes V3PreLex_scan_bytes
#endif

#ifdef yy_init_buffer
#define V3PreLex_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer V3PreLex_init_buffer
#endif

#ifdef yy_flush_buffer
#define V3PreLex_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer V3PreLex_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define V3PreLex_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state V3PreLex_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define V3PreLex_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define V3PreLexpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state V3PreLexpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define V3PreLexpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state V3PreLexpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define V3PreLexensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack V3PreLexensure_buffer_stack
#endif

#ifdef yylex
#define V3PreLexlex_ALREADY_DEFINED
#else
#define yylex V3PreLexlex
#endif

#ifdef yyrestart
#define V3PreLexrestart_ALREADY_DEFINED
#else
#define yyrestart V3PreLexrestart
#endif

#ifdef yylex_init
#define V3PreLexlex_init_ALREADY_DEFINED
#else
#define yylex_init V3PreLexlex_init
#endif

#ifdef yylex_init_extra
#define V3PreLexlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra V3PreLexlex_init_extra
#endif

#ifdef yylex_destroy
#define V3PreLexlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy V3PreLexlex_destroy
#endif

#ifdef yyget_debug
#define V3PreLexget_debug_ALREADY_DEFINED
#else
#define yyget_debug V3PreLexget_debug
#endif

#ifdef yyset_debug
#define V3PreLexset_debug_ALREADY_DEFINED
#else
#define yyset_debug V3PreLexset_debug
#endif

#ifdef yyget_extra
#define V3PreLexget_extra_ALREADY_DEFINED
#else
#define yyget_extra V3PreLexget_extra
#endif

#ifdef yyset_extra
#define V3PreLexset_extra_ALREADY_DEFINED
#else
#define yyset_extra V3PreLexset_extra
#endif

#ifdef yyget_in
#define V3PreLexget_in_ALREADY_DEFINED
#else
#define yyget_in V3PreLexget_in
#endif

#ifdef yyset_in
#define V3PreLexset_in_ALREADY_DEFINED
#else
#define yyset_in V3PreLexset_in
#endif

#ifdef yyget_out
#define V3PreLexget_out_ALREADY_DEFINED
#else
#define yyget_out V3PreLexget_out
#endif

#ifdef yyset_out
#define V3PreLexset_out_ALREADY_DEFINED
#else
#define yyset_out V3PreLexset_out
#endif

#ifdef yyget_leng
#define V3PreLexget_leng_ALREADY_DEFINED
#else
#define yyget_leng V3PreLexget_leng
#endif

#ifdef yyget_text
#define V3PreLexget_text_ALREADY_DEFINED
#else
#define yyget_text V3PreLexget_text
#endif

#ifdef yyget_lineno
#define V3PreLexget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno V3PreLexget_lineno
#endif

#ifdef yyset_lineno
#define V3PreLexset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno V3PreLexset_lineno
#endif

#ifdef yywrap
#define V3PreLexwrap_ALREADY_DEFINED
#else
#define yywrap V3PreLexwrap
#endif

/* %endif */

#ifdef yyalloc
#define V3PreLexalloc_ALREADY_DEFINED
#else
#define yyalloc V3PreLexalloc
#endif

#ifdef yyrealloc
#define V3PreLexrealloc_ALREADY_DEFINED
#else
#define yyrealloc V3PreLexrealloc
#endif

#ifdef yyfree
#define V3PreLexfree_ALREADY_DEFINED
#else
#define yyfree V3PreLexfree
#endif

/* %if-c-only */

#ifdef yytext
#define V3PreLextext_ALREADY_DEFINED
#else
#define yytext V3PreLextext
#endif

#ifdef yyleng
#define V3PreLexleng_ALREADY_DEFINED
#else
#define yyleng V3PreLexleng
#endif

#ifdef yyin
#define V3PreLexin_ALREADY_DEFINED
#else
#define yyin V3PreLexin
#endif

#ifdef yyout
#define V3PreLexout_ALREADY_DEFINED
#else
#define yyout V3PreLexout
#endif

#ifdef yy_flex_debug
#define V3PreLex_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug V3PreLex_flex_debug
#endif

#ifdef yylineno
#define V3PreLexlineno_ALREADY_DEFINED
#else
#define yylineno V3PreLexlineno
#endif

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define V3PreLexwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int32_t yy_accept[366] =
    {   0,
        0,    0,  100,  100,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  119,  117,  114,  110,
      116,  115,   15,  117,  111,  117,  117,    1,  114,  116,
      117,  100,  118,  106,  102,  104,  102,  106,  107,  107,
      107,  105,   18,   16,   18,   22,   17,  118,   47,   46,
       47,   45,   61,   53,   63,   52,   56,   48,   49,   63,
       63,   59,   63,   60,   61,   72,   68,   74,   67,   71,
       74,   74,   74,   80,   78,   80,   80,   79,   80,   36,
       33,   32,   35,   34,   25,   27,   36,   36,   33,   35,

       36,   96,   84,   97,   83,   85,   90,   91,   97,   92,
       97,   88,   89,   97,   42,   41,   42,   44,  118,   39,
       38,   39,   39,  114,  110,    0,  101,   99,  111,    0,
      111,   23,  108,    0,  108,  113,  108,  108,  108,  108,
      108,  114,    0,    0,    0,  108,  100,  102,  104,  102,
      103,    0,  105,   16,    0,   17,   21,   21,   19,   21,
       46,    0,   61,   53,    0,   50,   51,   62,   62,   55,
        0,   58,    0,   72,   68,    0,   64,   66,   73,   73,
       70,    0,   78,    0,   75,   79,    0,   77,    0,   33,
       32,    0,   27,    0,   27,   26,   29,    0,   29,   31,

       33,    0,   29,   96,   84,    0,   81,   82,   87,   93,
        0,   95,   41,    0,   43,   38,    0,    0,    0,   98,
        0,  112,  111,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,    0,  108,    0,   20,    0,
        0,   51,    0,   54,    0,    0,   66,   66,    0,   69,
        0,   76,    0,   28,   29,    0,   29,    0,   29,   29,
       82,   93,    0,   93,    0,    0,  111,  109,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,    0,
      108,   57,   65,    0,   30,   24,   29,   29,   29,   94,
       86,    0,  108,  108,  108,    4,  108,  108,  108,  108,

      108,  108,  108,  108,    0,  108,   29,   29,   29,    0,
      108,  108,  108,    5,    6,   12,    7,  108,  108,  108,
       10,    0,    0,   29,   29,    0,  108,  108,    3,    8,
      108,  108,  108,    0,    0,    2,    0,   29,   29,    0,
      108,  108,    9,  108,  108,    0,   29,   29,    0,   13,
       14,  108,  108,   13,   14,    0,   37,  108,    0,  108,
        0,   11,    0,   40,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    7,    1,    1,    1,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        1,   14,    1,    1,   15,   15,   15,   15,   16,   17,
       15,   15,   18,   15,   15,   19,   15,   20,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       21,   22,   23,    1,   24,   25,   26,   15,   27,   28,

       29,   30,   15,   15,   31,   15,   15,   32,   15,   33,
       34,   35,   15,   36,   37,   38,   39,   15,   15,   15,
       15,   15,   21,    1,   23,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   40,    1,    1,    1,
       40,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   40,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[41] =
    {   0,
        1,    2,    3,    4,    1,    5,    6,    7,    7,    8,
        9,    8,   10,    1,   11,   11,   11,   11,   11,   11,
        7,    5,    7,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    1
    } ;

static const flex_int32_t yy_base[402] =
    {   0,
        0,   39,   41,   43,   46,   49,   64,    0,  104,    0,
       54,  142,  148,  171,  194,  214,  236,    0,  276,  157,
      314,  337,  164,  181,  162,  185,  957, 1052,  954, 1052,
       51, 1052, 1052,   51,  926,    0,  357, 1052,  203,  209,
      391,    0, 1052, 1052,  145, 1052,  160,  938, 1052,  187,
      937,    0, 1052, 1052,  198, 1052,    0,  219, 1052, 1052,
      205, 1052,    0, 1052,  211,    0, 1052, 1052, 1052, 1052,
      215, 1052,  227, 1052,  322,    0, 1052,  229,    0, 1052,
     1052,  317,  328, 1052, 1052,  330,  926,    0,  348, 1052,
      931, 1052,  350, 1052, 1052,  907,    0,  349,  362,  365,

      369,    0, 1052,  353,    0, 1052, 1052, 1052, 1052, 1052,
      360, 1052, 1052,  355, 1052, 1052,  380, 1052,    0, 1052,
     1052,  395,  902,  928, 1052,  399, 1052,  402,  904,  900,
      899, 1052,  898,    0,  383, 1052,  385,  392,  402,  340,
      396,  429,  432,  889,  435,  364,    0,  407, 1052,  438,
     1052,  440,    0, 1052,  442,    0, 1052,  445, 1052,  447,
     1052,  449,    0, 1052,  452, 1052,    0, 1052,  459, 1052,
      455, 1052,  895,    0, 1052,  461, 1052,  897, 1052,  464,
     1052,  466, 1052,  468, 1052,    0,  471, 1052,  473,  912,
     1052,  475,  888,  887,  886, 1052,  885,  876,  456, 1052,

      480,  483,  387,    0, 1052,  485, 1052,    0, 1052,  875,
      874, 1052, 1052,  487, 1052, 1052,  489,  861,  492, 1052,
      495, 1052,  868,  867,  847,  844,  484,  477,  475,  485,
      479,  486,  491,  492,  495,  837,  496,  528, 1052,  521,
      524,    0,  531, 1052,  533,  861,  826,  535,  538, 1052,
      540, 1052,  542, 1052,  822,  820,  819,  837,  530,  523,
        0,  791,  790,  785,  803,  780,  782, 1052,  130,  533,
      528,  535,  536,  529,  540,  543,  545,  537,  547,  773,
      549, 1052, 1052,  576, 1052, 1052,  563,  564,  558, 1052,
     1052,  761,  565,  566,  560,  770,  567,  569,  570,  571,

      573,  575,  578,  579,  765,  548,  586,  588,  608,  753,
      599,  600,  592,  763,  762,  663,  662,  593,  594,  601,
      604,  628,  634,  615,  618,  652,  617,  620,  660,  659,
      621,  614,  622,  645,  654, 1052,  657,  629,  638,  645,
      640,  642,  626,  643,  644,  667,  650,  652,  493,  481,
      458,  653,  654,  375,  353,  311,  296,  595,  197,  657,
      143,   35,   14, 1052, 1052,  689,  701,  713,  725,  737,
      749,  761,  773,  780,  792,  800,  812,  815,  817,  828,
      840,  852,  864,  876,  879,  885,  897,  904,  916,  923,
      935,  942,  954,  965,  977,  984,  996, 1008, 1015, 1027,

     1039
    } ;

static const flex_int32_t yy_def[402] =
    {   0,
      365,    1,  366,  366,  367,  367,  365,    7,  365,    9,
      368,  368,  369,  369,  370,  370,  365,   17,  365,   19,
      371,  371,  372,  372,  373,  373,  365,  365,  365,  365,
      365,  365,  365,  365,  374,  375,  376,  365,  365,  365,
      376,  377,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  378,  365,  365,  365,  365,  379,  380,  365,  365,
      365,  365,  381,  365,  365,  381,  365,  365,  365,  365,
      365,  365,  382,  365,  381,  383,  365,  365,  383,  365,
      365,  365,  384,  365,  365,  365,  365,  385,  365,  365,
      365,  365,  365,  365,  365,  386,  387,  388,  365,  365,

      388,  389,  365,  365,  389,  365,  365,  365,  365,  365,
      365,  365,  365,  390,  365,  365,  365,  365,  391,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  374,  365,
      375,  365,  392,  393,  392,  365,  392,  392,  392,  392,
      392,  365,  365,  365,  365,  392,  377,  365,  365,  365,
      365,  365,  378,  365,  365,  379,  365,  365,  365,  365,
      365,  365,  381,  365,  365,  365,  394,  365,  365,  365,
      365,  365,  365,  383,  365,  365,  365,  395,  365,  365,
      365,  365,  365,  365,  365,  385,  365,  365,  365,  365,
      365,  365,  386,  365,  387,  365,  396,  397,  396,  365,

      365,  365,  396,  389,  365,  365,  365,  398,  365,  399,
      400,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  375,  392,  365,  393,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  365,  392,  365,  365,  365,
      365,  394,  365,  365,  365,  365,  395,  395,  365,  365,
      365,  365,  365,  365,  396,  365,  397,  365,  396,  396,
      398,  399,  365,  400,  365,  365,  375,  365,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  365,
      392,  365,  365,  365,  365,  365,  396,  396,  396,  365,
      365,  365,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  365,  392,  396,  396,  396,  365,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  365,  401,  396,  396,  365,  392,  392,  392,  392,
      392,  392,  392,  401,  401,  365,  401,  396,  396,  365,
      392,  392,  392,  392,  392,  401,  396,  396,  365,  392,
      392,  392,  392,  396,  396,  365,  392,  392,  365,  392,
      365,  392,  365,  365,    0,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365
    } ;

static const flex_int32_t yy_nxt[1093] =
    {   0,
       28,   29,   30,   31,   32,   33,   28,   28,   28,   28,
       28,   34,   28,   28,   35,   35,   35,   35,   35,   35,
       28,   36,   28,   35,   37,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   38,
       39,  364,   40,   43,   43,   43,   43,   45,   46,   47,
       45,   46,   47,  125,  126,   48,   60,   61,   48,  225,
      127,   62,  128,   41,   49,   49,   46,   50,   49,   49,
       49,   49,   49,   51,   49,   49,   52,   49,   52,   52,
       52,   52,   52,   52,   49,   49,   49,   52,   49,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   49,   53,   53,   54,   55,   53,   56,
       53,   53,   53,   53,   53,   53,   57,   53,   57,   57,
       57,   57,   57,   57,   53,   58,   53,   57,   53,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   53,   60,   61,  148,  293,  148,   62,
       64,   65,   66,   67,  225,   68,   69,   70,   99,   71,
      100,  148,  149,  150,  121,  122,  116,  117,   72,   73,
       74,  363,   75,   64,   65,   66,   67,  118,   68,   69,
       70,  101,   71,  116,  117,  119,  123,  121,  122,  149,
      152,   72,   73,   74,  118,   75,   77,   78,   79,   80,

      154,  155,  119,   81,  142,   82,  143,  161,  162,  123,
      143,  125,  145,  164,  165,   83,   77,   78,   79,   80,
      158,  159,  160,   81,  166,   82,  167,  144,  169,  170,
      171,  175,  176,  144,  361,   83,   84,   84,   85,   86,
       84,   84,   84,   84,   84,   87,   84,   84,   88,   84,
       88,   88,   88,   88,   88,   88,   84,   89,   84,   88,
       84,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   84,   90,   91,   92,   93,
       94,   95,   90,   90,   90,   90,   90,   90,   90,   90,
       96,   96,   96,   96,   96,   96,   90,   97,   90,   96,

       98,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   90,  103,  104,  105,  106,
      225,  107,  108,  109,  110,  111,  177,  172,  178,  180,
      181,  182,  183,  184,  112,  109,  113,  359,  114,  103,
      104,  105,  106,  173,  107,  108,  109,  110,  111,  187,
      188,  189,  191,  192,  196,  205,  206,  112,  109,  113,
      209,  114,  132,  201,  225,  143,  143,  191,  202,  207,
      198,  208,  199,  200,  196,  234,  211,  256,  134,  212,
      135,  136,  213,  214,  137,  138,  144,  139,  225,  144,
      198,  140,  199,  200,  237,  141,  132,  216,  217,  256,

      203,  125,  126,  219,  220,  221,  227,  225,  148,  225,
      148,  256,  134,  228,  135,  136,  225,  260,  137,  138,
      225,  139,  146,  229,  230,  140,  225,  231,  235,  141,
      142,  232,  143,  143,  233,  143,  143,  125,  145,  148,
      149,  150,  149,  152,  154,  155,  238,  239,  240,  159,
      241,  161,  162,  144,  164,  165,  144,  170,  171,  144,
      243,  244,  245,  175,  176,  249,  250,  251,  181,  182,
      183,  184,  187,  252,  253,  188,  189,  191,  192,  259,
      256,  201,  225,  143,  143,  191,  202,  205,  206,  213,
      214,  216,  217,  219,  220,  221,  219,  220,  221,  225,

      269,  225,  270,  225,  144,  225,  271,  144,  225,  225,
      225,  272,  273,  275,  274,  225,  225,  277,  276,  225,
      225,  356,  279,  239,  240,  278,  159,  241,  281,  238,
      239,  240,  243,  244,  245,  244,  245,  283,  284,  249,
      250,  251,  250,  251,  252,  253,  287,  256,  288,  323,
      294,  323,  225,  225,  256,  289,  248,  225,  295,  225,
      225,  225,  299,  296,  225,  297,  298,  225,  300,  225,
      301,  225,  225,  225,  303,  304,  302,  306,  283,  284,
      307,  308,  256,  311,  225,  312,  309,  256,  256,  225,
      225,  225,  313,  225,  225,  225,  314,  225,  315,  225,

      317,  318,  225,  225,  324,  316,  320,  325,  321,  323,
      256,  323,  256,  319,  327,  328,  225,  225,  225,  225,
      329,  331,  330,  225,  225,  225,  360,  332,  225,  323,
      338,  323,  256,  339,  333,  335,  336,  337,  225,  256,
      341,  225,  256,  342,  225,  225,  225,  336,  346,  343,
      225,  344,  347,  256,  345,  335,  336,  337,  335,  336,
      337,  348,  256,  350,  225,  351,  225,  225,  225,  336,
      346,  352,  353,  354,  256,  355,  256,  225,  225,  358,
      357,  225,  349,  225,  225,  340,  225,  225,  362,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  129,  225,  225,  326,  129,
      129,  129,  131,  322,  225,  310,  131,  131,  131,  131,

      131,  131,  131,  131,  133,  305,  267,  292,  291,  263,
      133,  133,  147,  147,  290,  263,  147,  147,  147,  147,
      147,  147,  147,  147,  153,  153,  156,  156,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      163,  163,  286,  256,  285,  163,  256,  248,  163,  163,
      163,  163,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  174,  174,  282,  280,  225,  174,
      174,  268,  174,  174,  174,  174,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  186,  186,
      193,  225,  267,  266,  193,  193,  193,  195,  265,  263,

      258,  195,  195,  195,  195,  195,  195,  195,  197,  256,
      194,  254,  194,  190,  197,  197,  204,  204,  248,  246,
      236,  204,  225,  223,  222,  204,  204,  210,  130,  124,
      218,  194,  190,  210,  210,  215,  215,  185,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  224,  151,  151,
      130,  224,  224,  224,  226,  124,  365,  365,  226,  226,
      226,  226,  226,  226,  226,  242,  242,  365,  365,  242,
      242,  242,  242,  242,  242,  242,  242,  247,  247,  365,
      365,  247,  247,  247,  247,  247,  247,  247,  247,  255,
      365,  365,  365,  255,  255,  255,  257,  365,  365,  365,

      257,  257,  257,  257,  257,  257,  257,  257,  261,  261,
      365,  365,  261,  261,  261,  261,  261,  261,  261,  261,
      262,  365,  365,  365,  262,  262,  262,  264,  365,  365,
      365,  264,  264,  264,  264,  264,  264,  264,  264,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,   27,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365

    } ;

static const flex_int32_t yy_chk[1093] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,  363,    2,    3,    3,    4,    4,    5,    5,    5,
        6,    6,    6,   31,   31,    5,   11,   11,    6,  362,
       34,   11,   34,    2,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   12,   12,   45,  269,   45,   12,
       13,   13,   13,   13,  269,   13,   13,   13,   20,   13,
       20,   47,   47,   47,   25,   25,   23,   23,   13,   13,
       13,  361,   13,   14,   14,   14,   14,   23,   14,   14,
       14,   20,   14,   24,   24,   23,   25,   26,   26,   50,
       50,   14,   14,   14,   24,   14,   15,   15,   15,   15,

       55,   55,   24,   15,   39,   15,   39,   61,   61,   26,
       40,   40,   40,   65,   65,   15,   16,   16,   16,   16,
       58,   58,   58,   16,   71,   16,   71,   39,   73,   73,
       73,   78,   78,   40,  359,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   21,   21,   21,   21,
      357,   21,   21,   21,   21,   21,   82,   75,   82,   83,
       83,   83,   86,   86,   21,   21,   21,  356,   21,   22,
       22,   22,   22,   75,   22,   22,   22,   22,   22,   89,
       89,   89,   93,   93,   98,  104,  104,   22,   22,   22,
      114,   22,   37,   99,  140,   99,  100,  100,  100,  111,
       98,  111,   98,   98,  101,  140,  114,  355,   37,  114,
       37,   37,  117,  117,   37,   37,   99,   37,  146,  100,
      101,   37,  101,  101,  146,   37,   41,  122,  122,  354,

      101,  126,  126,  128,  128,  128,  135,  135,  148,  137,
      148,  203,   41,  137,   41,   41,  138,  203,   41,   41,
      141,   41,   41,  138,  138,   41,  139,  138,  141,   41,
      142,  139,  142,  143,  139,  143,  145,  145,  145,  150,
      150,  150,  152,  152,  155,  155,  158,  158,  158,  160,
      160,  162,  162,  142,  165,  165,  143,  171,  171,  145,
      169,  169,  169,  176,  176,  180,  180,  180,  182,  182,
      184,  184,  187,  187,  187,  189,  189,  192,  192,  199,
      199,  201,  351,  201,  202,  202,  202,  206,  206,  214,
      214,  217,  217,  219,  219,  219,  221,  221,  221,  229,

      227,  228,  227,  231,  201,  350,  228,  202,  227,  230,
      232,  229,  230,  232,  231,  233,  234,  233,  232,  235,
      237,  349,  235,  240,  240,  234,  241,  241,  237,  238,
      238,  238,  243,  243,  243,  245,  245,  248,  248,  249,
      249,  249,  251,  251,  253,  253,  259,  260,  259,  306,
      270,  306,  271,  274,  259,  260,  248,  270,  271,  272,
      273,  278,  274,  272,  275,  272,  273,  276,  275,  277,
      276,  279,  306,  281,  278,  279,  277,  281,  284,  284,
      287,  288,  289,  293,  295,  294,  289,  287,  288,  293,
      294,  297,  295,  298,  299,  300,  297,  301,  298,  302,

      300,  301,  303,  304,  307,  299,  303,  308,  304,  309,
      307,  309,  308,  302,  311,  312,  313,  318,  319,  358,
      313,  319,  318,  311,  312,  320,  358,  320,  321,  322,
      324,  322,  309,  325,  321,  323,  323,  323,  332,  324,
      327,  327,  325,  328,  328,  331,  333,  334,  334,  331,
      343,  332,  338,  338,  333,  335,  335,  335,  337,  337,
      337,  339,  339,  341,  341,  342,  342,  344,  345,  346,
      346,  344,  345,  347,  347,  348,  348,  352,  353,  353,
      352,  360,  340,  330,  329,  326,  317,  316,  360,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  374,  315,  314,  310,  374,
      374,  374,  375,  305,  296,  292,  375,  375,  375,  375,

      375,  375,  375,  375,  376,  280,  267,  266,  265,  264,
      376,  376,  377,  377,  263,  262,  377,  377,  377,  377,
      377,  377,  377,  377,  378,  378,  379,  379,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      381,  381,  258,  257,  256,  381,  255,  247,  381,  381,
      381,  381,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  383,  383,  246,  236,  226,  383,
      383,  225,  383,  383,  383,  383,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  385,  385,
      386,  224,  223,  218,  386,  386,  386,  387,  211,  210,

      198,  387,  387,  387,  387,  387,  387,  387,  388,  197,
      195,  194,  193,  190,  388,  388,  389,  389,  178,  173,
      144,  389,  133,  131,  130,  389,  389,  390,  129,  124,
      123,   96,   91,  390,  390,  391,  391,   87,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  392,   51,   48,
       35,  392,  392,  392,  393,   29,   27,    0,  393,  393,
      393,  393,  393,  393,  393,  394,  394,    0,    0,  394,
      394,  394,  394,  394,  394,  394,  394,  395,  395,    0,
        0,  395,  395,  395,  395,  395,  395,  395,  395,  396,
        0,    0,    0,  396,  396,  396,  397,    0,    0,    0,

      397,  397,  397,  397,  397,  397,  397,  397,  398,  398,
        0,    0,  398,  398,  398,  398,  398,  398,  398,  398,
      399,    0,    0,    0,  399,  399,  399,  400,    0,    0,
        0,  400,  400,  400,  400,  400,  400,  400,  400,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int32_t yy_rule_linenum[118] =
    {   0,
       86,   87,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  105,  111,  113,  114,  115,  116,  117,
      118,  119,  124,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  141,  143,  144,  145,
      149,  150,  151,  152,  156,  157,  159,  162,  163,  164,
      165,  166,  168,  169,  170,  171,  172,  173,  174,  175,
      176,  177,  178,  181,  182,  183,  184,  186,  187,  188,
      189,  190,  191,  192,  197,  198,  199,  201,  203,  204,
      208,  209,  210,  212,  213,  214,  215,  216,  217,  218,
      227,  233,  238,  239,  240,  241,  242,  245,  246,  247,

      252,  253,  254,  255,  257,  258,  259,  263,  264,  267,
      269,  270,  271,  272,  273,  274,  275
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../V3PreLex.l"
#line 6 "../V3PreLex.l"
/**************************************************************************
 * DESCRIPTION: Verilator: Flex verilog preprocessor
 *
 * Code available from: http://www.veripool.org/verilator
 *
 **************************************************************************
 *
 * Copyright 2003-2019 by Wilson Snyder.  This program is free software;
 * you can redistribute it and/or modify it under the terms of either the
 * GNU Lesser General Public License Version 3 or the Perl Artistic License
 * Version 2.0.
 *
 * Verilator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 **************************************************************************
 * Do not use Flex in C++ mode.  It has bugs with yyunput() which result in
 * lost characters.
 **************************************************************************/

#include "V3PreProc.h"
#include "V3PreLex.h"

V3PreLex* V3PreLex::s_currentLexp = NULL;	// Current lexing point

#define LEXP V3PreLex::s_currentLexp

#define YY_INPUT(buf,result,max_size) \
    result = LEXP->inputToLex(buf,max_size);

// Accessors, because flex keeps changing the type of yyleng
char* yyourtext() { return yytext; }
size_t yyourleng() { return yyleng; }
void yyourtext(const char* textp, size_t size) { yytext=(char*)textp; yyleng=size; }

// Prevent conflicts from perl version
static void linenoInc()  {LEXP->linenoInc();}
static bool pedantic() { return LEXP->m_pedantic; }
static void yyerror(char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void yyerrorf(const char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void appendDefValue(const char* t, size_t l) { LEXP->appendDefValue(t,l); }

/**********************************************************************/
#line 1217 "V3PreLex_pregen.yy.cpp"

/* drop: Drop Ctrl-Z - can't pass thru or may EOF the output too soon */
/* Where we use symb/symbdef, we must also look for a `` join */
/* Note in the preprocessor \ESCaped is *not* always special; mantis1537/bug441 */
#line 83 "../V3PreLex.l"
	/**************************************************************/
#line 1224 "V3PreLex_pregen.yy.cpp"

#define INITIAL 0
#define CMTONEM 1
#define CMTBEGM 2
#define CMTMODE 3
#define STRMODE 4
#define DEFFPAR 5
#define DEFFORM 6
#define DEFVAL 7
#define DEFCMT 8
#define STRIFY 9
#define ARGMODE 10
#define INCMODE 11
#define PRTMODE 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 84 "../V3PreLex.l"


#line 1532 "V3PreLex_pregen.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 366 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1052 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 118 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 118 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 119 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 86 "../V3PreLex.l"
{ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 87 "../V3PreLex.l"
{ LEXP->lineDirective(yytext);
						  return(VP_LINE); }
	YY_BREAK
/* Special directives we recognize */
case 3:
YY_RULE_SETUP
#line 91 "../V3PreLex.l"
{ return(VP_DEFINE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "../V3PreLex.l"
{ return(VP_ELSE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "../V3PreLex.l"
{ return(VP_ELSIF); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 94 "../V3PreLex.l"
{ return(VP_ENDIF); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 95 "../V3PreLex.l"
{ return(VP_IFDEF); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "../V3PreLex.l"
{ return(VP_IFNDEF); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 97 "../V3PreLex.l"
{ return(VP_INCLUDE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "../V3PreLex.l"
{ return(VP_UNDEF); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 "../V3PreLex.l"
{ return(VP_UNDEFINEALL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "../V3PreLex.l"
{ if (!pedantic()) return (VP_ERROR); else return(VP_DEFREF); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "../V3PreLex.l"
{ static string rtnfile;
			  rtnfile = '"'; rtnfile += LEXP->curFilelinep()->filename();
			  rtnfile += '"'; yytext=(char*)rtnfile.c_str(); yyleng = rtnfile.length();
			  return (VP_STRING); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "../V3PreLex.l"
{ static char buf[10];
			  sprintf(buf, "%d",LEXP->curFilelinep()->lineno());
	                  yytext = buf; yyleng = strlen(yytext);
			  return (VP_TEXT); }
	YY_BREAK
/* Pass-through strings */
case 15:
YY_RULE_SETUP
#line 111 "../V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(STRMODE):
#line 112 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated string"); yyleng=0; yyterminate(); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 113 "../V3PreLex.l"
{ linenoInc(); yyerrorf("Unterminated string"); BEGIN(INITIAL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 115 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 116 "../V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 117 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "../V3PreLex.l"
{ yy_pop_state();
			  if (LEXP->m_parenLevel || LEXP->m_defQuote) { LEXP->m_defQuote=false; appendDefValue(yytext,yyleng); yyleng=0; }
			  else return (VP_STRING); }
	YY_BREAK
/* Stringification */
case 23:
YY_RULE_SETUP
#line 124 "../V3PreLex.l"
{ yy_push_state(STRIFY); return VP_STRIFY; }
	YY_BREAK
case YY_STATE_EOF(STRIFY):
#line 125 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated '\""); yyleng=0; yyterminate(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 126 "../V3PreLex.l"
{ return VP_BACKQUOTE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 127 "../V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 128 "../V3PreLex.l"
{ yy_pop_state(); return VP_STRIFY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 129 "../V3PreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 130 "../V3PreLex.l"
{ yyleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 131 "../V3PreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 132 "../V3PreLex.l"
{ yyleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 133 "../V3PreLex.l"
{ yyleng-=2; return (VP_JOIN); }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 134 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 135 "../V3PreLex.l"
{ return (VP_WHITE); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 136 "../V3PreLex.l"
{ }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 137 "../V3PreLex.l"
{ }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 138 "../V3PreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
/* Protected blocks */
case 37:
YY_RULE_SETUP
#line 141 "../V3PreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(PRTMODE):
#line 142 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in `protected"); yyleng=0; yyterminate(); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 143 "../V3PreLex.l"
{ linenoInc(); return VP_TEXT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 144 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 145 "../V3PreLex.l"
{ yy_pop_state(); return VP_TEXT; }
	YY_BREAK
/* Pass-through include <> filenames */
case YY_STATE_EOF(INCMODE):
#line 148 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated include filename"); yyleng=0; yyterminate(); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 149 "../V3PreLex.l"
{ linenoInc(); yyerrorf("Unterminated include filename"); BEGIN(INITIAL); }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 150 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 151 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 152 "../V3PreLex.l"
{ yy_pop_state(); return VP_STRING; }
	YY_BREAK
/* Reading definition formal parenthesis (or not) to begin formal arguments */
/* Note '(' must IMMEDIATELY follow definition name */
case 45:
YY_RULE_SETUP
#line 156 "../V3PreLex.l"
{ appendDefValue("(",1); LEXP->m_formalLevel=1; BEGIN(DEFFORM); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 157 "../V3PreLex.l"
{ yy_pop_state(); unput('\n'); yyleng=0; return VP_DEFFORM; } /* DEFVAL will later grab the return */
	YY_BREAK
case YY_STATE_EOF(DEFFPAR):
#line 158 "../V3PreLex.l"
{ yy_pop_state(); return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 159 "../V3PreLex.l"
{ yy_pop_state(); unput(yytext[yyleng-1]); yyleng=0; return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
/* Reading definition formals (declaration of a define) */
case 48:
YY_RULE_SETUP
#line 162 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); yyleng=0; ++LEXP->m_formalLevel; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 163 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); yyleng=0; if ((--LEXP->m_formalLevel)==0) { yy_pop_state(); return VP_DEFFORM; } }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 164 "../V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 165 "../V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 166 "../V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFFORM):
#line 167 "../V3PreLex.l"
{ linenoInc(); yy_pop_state(); yyerrorf("Unterminated ( in define formal arguments."); yyleng=0; return VP_DEFFORM; }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 168 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); } /* Include return so can maintain output line count */
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 169 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 170 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Include return so can maintain output line count */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 171 "../V3PreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 172 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 173 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 174 "../V3PreLex.l"
{ LEXP->m_formalLevel++; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 175 "../V3PreLex.l"
{ LEXP->m_formalLevel--; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 61:
#line 177 "../V3PreLex.l"
case 62:
#line 178 "../V3PreLex.l"
case 63:
YY_RULE_SETUP
#line 178 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* Reading definition value (declaration of a define's text) */
case 64:
YY_RULE_SETUP
#line 181 "../V3PreLex.l"
{ LEXP->m_defCmtSlash=false; yy_push_state(DEFCMT); yymore(); }  /* Special comment parser */
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 182 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); }  /* Spec says // not part of define value */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 183 "../V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 184 "../V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFVAL):
#line 185 "../V3PreLex.l"
{ linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return (VP_DEFVALUE); } /* Technically illegal, but people complained */
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 186 "../V3PreLex.l"
{ linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return (VP_DEFVALUE); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 187 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 188 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Return, AND \ is part of define value */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 189 "../V3PreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 72:
#line 191 "../V3PreLex.l"
case 73:
#line 192 "../V3PreLex.l"
case 74:
YY_RULE_SETUP
#line 192 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* Comments inside define values - if embedded get added to define value per spec */
/* - if no \{crnl} ending then the comment belongs to the next line, as a non-embedded comment */
/* - if all but (say) 3rd line is missing \ then it's indeterminate */
case 75:
YY_RULE_SETUP
#line 197 "../V3PreLex.l"
{ yy_pop_state(); appendDefValue(yytext,yyleng); }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 198 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 199 "../V3PreLex.l"
{ linenoInc(); LEXP->m_defCmtSlash=true;
	 		  appendDefValue(yytext,yyleng-2); appendDefValue((char*)"\n",1); }  /* Return but not \ */
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 201 "../V3PreLex.l"
{ linenoInc(); yymore(); if (LEXP->m_defCmtSlash) yyerrorf("One line of /* ... */ is missing \\ before newline");
			  BEGIN(CMTMODE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 203 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 204 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(DEFCMT):
#line 205 "../V3PreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); yyleng=0; yyterminate(); }
	YY_BREAK
/* Define arguments (use of a define) */
case 81:
YY_RULE_SETUP
#line 208 "../V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 209 "../V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 210 "../V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(ARGMODE):
#line 211 "../V3PreLex.l"
{ yyerrorf("EOF in define argument list\n"); yyleng = 0; yyterminate(); }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 212 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 213 "../V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 214 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Literal text */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 215 "../V3PreLex.l"
{ yy_push_state(STRIFY); return(VP_STRIFY); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 216 "../V3PreLex.l"
{ LEXP->m_parenLevel++; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 217 "../V3PreLex.l"
{ LEXP->m_parenLevel--; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 218 "../V3PreLex.l"
{ LEXP->m_parenLevel++;
			  // Note paren level 0 means before "(" of starting args
			  // Level 1 means "," between arguments
			  // Level 2+ means one inside the () of an argument
			  if (LEXP->m_parenLevel>1) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      return (VP_TEXT);
			}}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../V3PreLex.l"
{ LEXP->m_parenLevel--;
			  if (LEXP->m_parenLevel>0) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 233 "../V3PreLex.l"
{ if (LEXP->m_parenLevel>1) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 238 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 239 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 240 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 96:
#line 242 "../V3PreLex.l"
case 97:
YY_RULE_SETUP
#line 242 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* One line comments. */
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 245 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return (VP_WHITE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 246 "../V3PreLex.l"
{ yy_push_state(CMTONEM); yymore(); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 247 "../V3PreLex.l"
{ yy_pop_state(); return (VP_COMMENT); }
	YY_BREAK
/* C-style comments. */
/**** See also DEFCMT */
/* We distinguish between the start of a comment, and later, to look for prefix comments (deprecated) */
case 101:
YY_RULE_SETUP
#line 252 "../V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 253 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 254 "../V3PreLex.l"
{ yy_pop_state(); return(VP_COMMENT); }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 255 "../V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case YY_STATE_EOF(CMTBEGM):
case YY_STATE_EOF(CMTMODE):
#line 256 "../V3PreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); yyleng=0; yyterminate(); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 257 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 258 "../V3PreLex.l"
{ BEGIN CMTMODE; yymore(); }	/* beginning in comment */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 259 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
/* Define calls */
/* symbdef prevents normal lex rules from making `\`"foo a symbol {`"foo} instead of a BACKQUOTE */
case 108:
YY_RULE_SETUP
#line 263 "../V3PreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 264 "../V3PreLex.l"
{ yyleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
/* Generics */
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 267 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 268 "../V3PreLex.l"
{ yyterminate(); }  /* A "normal" EOF */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 269 "../V3PreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 270 "../V3PreLex.l"
{ yyleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 271 "../V3PreLex.l"
{ yyleng-=2; return (VP_JOIN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 272 "../V3PreLex.l"
{ return (VP_WHITE); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 273 "../V3PreLex.l"
{ }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 274 "../V3PreLex.l"
{ }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 275 "../V3PreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 276 "../V3PreLex.l"
ECHO;
	YY_BREAK
#line 2311 "V3PreLex_pregen.yy.cpp"
case YY_STATE_EOF(CMTONEM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 366 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 366 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 365);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  _new_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
    static void yy_pop_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
    static int yy_top_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 276 "../V3PreLex.l"


void V3PreLex::pushStateDefArg(int level) {
    // Enter define substitution argument state
    yy_push_state(ARGMODE);
    m_parenLevel = level;
    m_defValue = "";
}

void V3PreLex::pushStateDefForm() {
    // Enter define formal arguments state
    yy_push_state(DEFFPAR);  // First is an optional ( to begin args
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateDefValue() {
    // Enter define value state
    yy_push_state(DEFVAL);
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateIncFilename() {
    // Enter include <> filename state
    yy_push_state(INCMODE);
    yymore();
}

void V3PreLex::debug(int level) { yy_flex_debug=level; }
int V3PreLex::debug() { return yy_flex_debug; }

int V3PreLex::lex() {
    V3PreLex::s_currentLexp = this;  // Tell parser where to get/put data
    m_tokFilelinep = curFilelinep();  // Remember token start location, may be updated by the lexer later
    return yylex();
}

size_t V3PreLex::inputToLex(char* buf, size_t max_size) {
    // We need a custom YY_INPUT because we can't use flex buffers.
    // Flex buffers are limited to 2GB, and we can't chop into 2G pieces
    // because buffers can't end in the middle of tokens.
    // Note if we switched streams here (which we don't) "buf" would be
    // become a stale invalid pointer.
    //
    VPreStream* streamp = curStreamp();
    if (debug()>=10) { cout<<"-  pp:inputToLex ITL s="<<max_size<<" bs="<<streamp->m_buffers.size()<<endl;  dumpStack(); }
    // For testing, use really small chunks
    //if (max_size > 13) max_size=13;
  again:
    size_t got = 0;
    // Get from this stream
    while (got < max_size	// Haven't got enough
	   && !streamp->m_buffers.empty()) {	// And something buffered
	string front = curStreamp()->m_buffers.front(); streamp->m_buffers.pop_front();
	size_t len = front.length();
	if (len > (max_size-got)) {  // Front string too big
	    len = (max_size-got);
	    string remainder = front.substr(len);
	    front = front.substr(0, len);
	    streamp->m_buffers.push_front(remainder);  // Put back remainder for next time
	}
	strncpy(buf+got, front.c_str(), len);
	got += len;
    }
    if (!got) { // end of stream; try "above" file
	bool again=false;
	string forceOut = endOfStream(again/*ref*/);
	streamp = curStreamp();  // May have been updated
	if (forceOut != "") {
	    if (forceOut.length() > max_size) {
		yyerrorf("Output buffer too small for a `line");
	    } else {
		got = forceOut.length();
		strncpy(buf, forceOut.c_str(), got);
	    }
	} else {
	    if (streamp->m_eof) {
		if (yy_flex_debug) cout<<"-  EOF\n";
	    }
	    got = 0;  // 0=EOF/EOS - although got was already 0.
	    if (again) goto again;
	}
    }
    if (debug()>=10) { cout<<"-  pp::inputToLex  got="<<got<<" '"<<string(buf,got)<<"'"<<endl; }
    return got;
}

string V3PreLex::endOfStream(bool& againr) {
    // Switch to file or next unputString
    againr = false;
    if (yy_flex_debug) cout<<"-EOS state="<<curStreamp()->m_termState<<" at "<<curFilelinep()<<endl;
    if (curStreamp()->m_eof) return "";   // Don't delete the final "EOF" stream
    bool exited_file = curStreamp()->m_file;
    if (!exited_file) {
	// Midpoint of stream, just change buffers
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	againr = true;
	return "";
    }
    // Multiple steps because we need FLEX to see ending \n and EOS to end
    // any illegal states, like an unterminated `protected region
    else if (!curStreamp()->m_termState) {
	// First shutdown phase for a file
	// Terminate all files with a newline.  This prevents problems if
	// the user had a define without a terminating newline,
	// otherwise the resumed file's next line would get tacked on.
	// Also makes it likely the `line that changes files comes out
	// immediately.
	curStreamp()->m_termState = 1;
	return "\n";  // Exit old file
    }
    else if (curStreamp()->m_termState == 1) {
	// Now the EOF - can't be sent with other characters
	curStreamp()->m_termState = 2;
	return "";  // End of file
    }
    else if (curStreamp()->m_termState == 2) {
	// Now ending `line
	curStreamp()->m_termState = 3;
	return curFilelinep()->lineDirectiveStrg(2);  // Exit old file
    }
    else {
	// Final shutdown phase for a stream, we can finally change the
	// current fileline to the new stream
	curStreamp()->m_termState = 0;
	FileLine* filelinep = curFilelinep();
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	if (curStreamp()->m_eof) {
	    // EOF doesn't have a "real" fileline, but a linenumber of 0 from init time
	    // Inherit whatever we last parsed so it's more obvious.
	    curFilelinep(filelinep);
	}
	// The caller parser remembered the start location for the text we are parsing,
	// but we've discovered there was a file switch along the way, so update it.
	m_tokFilelinep = curFilelinep();
	//
	if (curStreamp()->m_eof) {
	    return "";
	} else {
	    return curFilelinep()->lineDirectiveStrg(0);  // Reenter resumed file
	}
    }
}

void V3PreLex::initFirstBuffer(FileLine* filelinep) {
    // Called from constructor to make first buffer
    // yy_create_buffer also sets yy_fill_buffer=1 so reads from YY_INPUT
    VPreStream* streamp = new VPreStream(filelinep, this);
    streamp->m_eof = true;
    m_streampStack.push(streamp);
    //
    m_bufferState = yy_create_buffer(NULL, YY_BUF_SIZE);
    yy_switch_to_buffer(m_bufferState);
    yyrestart(NULL);
}

void V3PreLex::scanNewFile(FileLine* filelinep) {
    // Called on new open file.  scanBytesBack will be called next.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// The recursive `include in VPreProcImp should trigger first
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(filelinep, this);
	m_tokFilelinep = curFilelinep();
	streamp->m_file = true;
	scanSwitchStream(streamp);
    }
}

void V3PreLex::scanBytes(const string& str) {
    // Note buffers also appended in ::scanBytesBack
    // Not "m_buffers.push_front(string(strp,len))" as we need a `define
    // to take effect immediately, in the middle of the current buffer
    // Also we don't use scan_bytes that would set yy_fill_buffer
    // which would force Flex to bypass our YY_INPUT routine.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// More streams if recursive `define with complex insertion
	// More buffers mostly if something internal goes funky
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(curFilelinep(), this);
	streamp->m_buffers.push_front(str);
	scanSwitchStream(streamp);
    }
}

void V3PreLex::scanSwitchStream(VPreStream* streamp) {
    curStreamp()->m_buffers.push_front(currentUnreadChars());
    m_streampStack.push(streamp);
    yyrestart(NULL);
}

void V3PreLex::scanBytesBack(const string& str) {
    // Initial creation, that will pull from YY_INPUT==inputToLex
    // Note buffers also appended in ::scanBytes
    if (curStreamp()->m_eof) yyerrorf("scanBytesBack without being under scanNewFile");
    curStreamp()->m_buffers.push_back(str);
}

string V3PreLex::currentUnreadChars() {
    // WARNING - Peeking at internals
    ssize_t left = (yy_n_chars - (yy_c_buf_p -currentBuffer()->yy_ch_buf));
    if (left > 0) {  // left may be -1 at EOS
	*(yy_c_buf_p) = (yy_hold_char);
	return string(yy_c_buf_p, left);
    } else {
	return "";
    }
}

YY_BUFFER_STATE V3PreLex::currentBuffer() {
    return YY_CURRENT_BUFFER;
}

int V3PreLex::currentStartState() const {
    return YY_START;
}

void V3PreLex::lineDirective(const char* textp) {
    curFilelinep()->lineDirective(textp, m_enterExit/*ref*/);
    // Make sure we have a dependency on whatever file was specified
    V3File::addSrcDepend(curFilelinep()->filename());
}

void V3PreLex::dumpSummary() {
    cout<<"-  pp::dumpSummary  curBuf="<<cvtToHex(currentBuffer());
#ifdef FLEX_DEBUG  // Else peeking at internals may cause portability issues
    ssize_t left = (yy_n_chars
		    - (yy_c_buf_p
		       -currentBuffer()->yy_ch_buf));
    cout<<" left="<<std::dec<<left;
#endif
    cout<<endl;
}

void V3PreLex::dumpStack() {
    // For debug use
    dumpSummary();
    std::stack<VPreStream*> tmpstack = LEXP->m_streampStack;
    while (!tmpstack.empty()) {
	VPreStream* streamp = tmpstack.top();
	cout<<"-    bufferStack["<<cvtToHex(streamp)<<"]: "
	    <<" at="<<streamp->m_curFilelinep
	    <<" nBuf="<<streamp->m_buffers.size()
	    <<" size0="<<(streamp->m_buffers.empty() ? 0 : streamp->m_buffers.front().length())
	    <<(streamp->m_eof?" [EOF]":"")
	    <<(streamp->m_file?" [FILE]":"");
	cout<<endl;
	tmpstack.pop();
    }
}

string V3PreLex::cleanDbgStrg(const string& in) {
    string out = in;
    string::size_type pos;
    while ((pos = out.find('\n')) != string::npos) { out.replace(pos, 1, "\\n"); }
    while ((pos = out.find('\r')) != string::npos) { out.replace(pos, 1, "\\r"); }
    return out;
}

void V3PreLex::unused() {
    if (0) {
	// Prevent unused warnings
	yy_top_state();
	yyerror((char*)"");
    }
}

/*###################################################################
 * Local Variables:
 * mode: C++
 * End:
 */

