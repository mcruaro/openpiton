// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-

    // These for use by VN_IS macro only
inline bool AstNode::privateIsAcosD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAcosD; }
inline bool AstNode::privateIsAcoshD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAcoshD; }
inline bool AstNode::privateIsActive(const AstNode* nodep) { return nodep && nodep->type() == AstType::atActive; }
inline bool AstNode::privateIsAdd(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAdd; }
inline bool AstNode::privateIsAddD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAddD; }
inline bool AstNode::privateIsAlways(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAlways; }
inline bool AstNode::privateIsAlwaysPost(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAlwaysPost; }
inline bool AstNode::privateIsAlwaysPublic(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAlwaysPublic; }
inline bool AstNode::privateIsAnd(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAnd; }
inline bool AstNode::privateIsArg(const AstNode* nodep) { return nodep && nodep->type() == AstType::atArg; }
inline bool AstNode::privateIsArraySel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atArraySel; }
inline bool AstNode::privateIsAsinD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAsinD; }
inline bool AstNode::privateIsAsinhD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAsinhD; }
inline bool AstNode::privateIsAssign(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssign; }
inline bool AstNode::privateIsAssignAlias(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssignAlias; }
inline bool AstNode::privateIsAssignDly(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssignDly; }
inline bool AstNode::privateIsAssignPost(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssignPost; }
inline bool AstNode::privateIsAssignPre(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssignPre; }
inline bool AstNode::privateIsAssignVarScope(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssignVarScope; }
inline bool AstNode::privateIsAssignW(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAssignW; }
inline bool AstNode::privateIsAtan2D(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAtan2D; }
inline bool AstNode::privateIsAtanD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAtanD; }
inline bool AstNode::privateIsAtanhD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAtanhD; }
inline bool AstNode::privateIsAttrOf(const AstNode* nodep) { return nodep && nodep->type() == AstType::atAttrOf; }
inline bool AstNode::privateIsBasicDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atBasicDType; }
inline bool AstNode::privateIsBegin(const AstNode* nodep) { return nodep && nodep->type() == AstType::atBegin; }
inline bool AstNode::privateIsBind(const AstNode* nodep) { return nodep && nodep->type() == AstType::atBind; }
inline bool AstNode::privateIsBitsToRealD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atBitsToRealD; }
inline bool AstNode::privateIsBreak(const AstNode* nodep) { return nodep && nodep->type() == AstType::atBreak; }
inline bool AstNode::privateIsBufIf1(const AstNode* nodep) { return nodep && nodep->type() == AstType::atBufIf1; }
inline bool AstNode::privateIsCCall(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCCall; }
inline bool AstNode::privateIsCCast(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCCast; }
inline bool AstNode::privateIsCFile(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCFile; }
inline bool AstNode::privateIsCFunc(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCFunc; }
inline bool AstNode::privateIsCLog2(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCLog2; }
inline bool AstNode::privateIsCMath(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCMath; }
inline bool AstNode::privateIsCReset(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCReset; }
inline bool AstNode::privateIsCReturn(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCReturn; }
inline bool AstNode::privateIsCStmt(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCStmt; }
inline bool AstNode::privateIsCase(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCase; }
inline bool AstNode::privateIsCaseItem(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCaseItem; }
inline bool AstNode::privateIsCast(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCast; }
inline bool AstNode::privateIsCastParse(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCastParse; }
inline bool AstNode::privateIsCastSize(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCastSize; }
inline bool AstNode::privateIsCeilD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCeilD; }
inline bool AstNode::privateIsCell(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCell; }
inline bool AstNode::privateIsCellArrayRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCellArrayRef; }
inline bool AstNode::privateIsCellInline(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCellInline; }
inline bool AstNode::privateIsCellRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCellRef; }
inline bool AstNode::privateIsChangeDet(const AstNode* nodep) { return nodep && nodep->type() == AstType::atChangeDet; }
inline bool AstNode::privateIsChangeXor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atChangeXor; }
inline bool AstNode::privateIsClocking(const AstNode* nodep) { return nodep && nodep->type() == AstType::atClocking; }
inline bool AstNode::privateIsComment(const AstNode* nodep) { return nodep && nodep->type() == AstType::atComment; }
inline bool AstNode::privateIsConcat(const AstNode* nodep) { return nodep && nodep->type() == AstType::atConcat; }
inline bool AstNode::privateIsConcatN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atConcatN; }
inline bool AstNode::privateIsCond(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCond; }
inline bool AstNode::privateIsCondBound(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCondBound; }
inline bool AstNode::privateIsConst(const AstNode* nodep) { return nodep && nodep->type() == AstType::atConst; }
inline bool AstNode::privateIsConstDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atConstDType; }
inline bool AstNode::privateIsContinue(const AstNode* nodep) { return nodep && nodep->type() == AstType::atContinue; }
inline bool AstNode::privateIsCosD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCosD; }
inline bool AstNode::privateIsCoshD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCoshD; }
inline bool AstNode::privateIsCountOnes(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCountOnes; }
inline bool AstNode::privateIsCoverDecl(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCoverDecl; }
inline bool AstNode::privateIsCoverInc(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCoverInc; }
inline bool AstNode::privateIsCoverToggle(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCoverToggle; }
inline bool AstNode::privateIsCvtPackString(const AstNode* nodep) { return nodep && nodep->type() == AstType::atCvtPackString; }
inline bool AstNode::privateIsDefImplicitDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDefImplicitDType; }
inline bool AstNode::privateIsDefParam(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDefParam; }
inline bool AstNode::privateIsDisable(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDisable; }
inline bool AstNode::privateIsDisplay(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDisplay; }
inline bool AstNode::privateIsDiv(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDiv; }
inline bool AstNode::privateIsDivD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDivD; }
inline bool AstNode::privateIsDivS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDivS; }
inline bool AstNode::privateIsDot(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDot; }
inline bool AstNode::privateIsDpiExport(const AstNode* nodep) { return nodep && nodep->type() == AstType::atDpiExport; }
inline bool AstNode::privateIsEnumDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEnumDType; }
inline bool AstNode::privateIsEnumItem(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEnumItem; }
inline bool AstNode::privateIsEnumItemRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEnumItemRef; }
inline bool AstNode::privateIsEq(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEq; }
inline bool AstNode::privateIsEqCase(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEqCase; }
inline bool AstNode::privateIsEqD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEqD; }
inline bool AstNode::privateIsEqN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEqN; }
inline bool AstNode::privateIsEqWild(const AstNode* nodep) { return nodep && nodep->type() == AstType::atEqWild; }
inline bool AstNode::privateIsExecGraph(const AstNode* nodep) { return nodep && nodep->type() == AstType::atExecGraph; }
inline bool AstNode::privateIsExpD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atExpD; }
inline bool AstNode::privateIsExtend(const AstNode* nodep) { return nodep && nodep->type() == AstType::atExtend; }
inline bool AstNode::privateIsExtendS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atExtendS; }
inline bool AstNode::privateIsFClose(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFClose; }
inline bool AstNode::privateIsFEof(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFEof; }
inline bool AstNode::privateIsFFlush(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFFlush; }
inline bool AstNode::privateIsFGetC(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFGetC; }
inline bool AstNode::privateIsFGetS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFGetS; }
inline bool AstNode::privateIsFOpen(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFOpen; }
inline bool AstNode::privateIsFRead(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFRead; }
inline bool AstNode::privateIsFScanF(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFScanF; }
inline bool AstNode::privateIsFinal(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFinal; }
inline bool AstNode::privateIsFinish(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFinish; }
inline bool AstNode::privateIsFloorD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFloorD; }
inline bool AstNode::privateIsForeach(const AstNode* nodep) { return nodep && nodep->type() == AstType::atForeach; }
inline bool AstNode::privateIsFunc(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFunc; }
inline bool AstNode::privateIsFuncRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atFuncRef; }
inline bool AstNode::privateIsGatePin(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGatePin; }
inline bool AstNode::privateIsGenCase(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGenCase; }
inline bool AstNode::privateIsGenFor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGenFor; }
inline bool AstNode::privateIsGenIf(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGenIf; }
inline bool AstNode::privateIsGenerate(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGenerate; }
inline bool AstNode::privateIsGt(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGt; }
inline bool AstNode::privateIsGtD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGtD; }
inline bool AstNode::privateIsGtN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGtN; }
inline bool AstNode::privateIsGtS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGtS; }
inline bool AstNode::privateIsGte(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGte; }
inline bool AstNode::privateIsGteD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGteD; }
inline bool AstNode::privateIsGteN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGteN; }
inline bool AstNode::privateIsGteS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atGteS; }
inline bool AstNode::privateIsHypotD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atHypotD; }
inline bool AstNode::privateIsIToRD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atIToRD; }
inline bool AstNode::privateIsIf(const AstNode* nodep) { return nodep && nodep->type() == AstType::atIf; }
inline bool AstNode::privateIsIface(const AstNode* nodep) { return nodep && nodep->type() == AstType::atIface; }
inline bool AstNode::privateIsIfaceRefDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atIfaceRefDType; }
inline bool AstNode::privateIsImplicit(const AstNode* nodep) { return nodep && nodep->type() == AstType::atImplicit; }
inline bool AstNode::privateIsInitArray(const AstNode* nodep) { return nodep && nodep->type() == AstType::atInitArray; }
inline bool AstNode::privateIsInitial(const AstNode* nodep) { return nodep && nodep->type() == AstType::atInitial; }
inline bool AstNode::privateIsInside(const AstNode* nodep) { return nodep && nodep->type() == AstType::atInside; }
inline bool AstNode::privateIsInsideRange(const AstNode* nodep) { return nodep && nodep->type() == AstType::atInsideRange; }
inline bool AstNode::privateIsIsUnknown(const AstNode* nodep) { return nodep && nodep->type() == AstType::atIsUnknown; }
inline bool AstNode::privateIsJumpGo(const AstNode* nodep) { return nodep && nodep->type() == AstType::atJumpGo; }
inline bool AstNode::privateIsJumpLabel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atJumpLabel; }
inline bool AstNode::privateIsLenN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLenN; }
inline bool AstNode::privateIsLog10D(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLog10D; }
inline bool AstNode::privateIsLogAnd(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLogAnd; }
inline bool AstNode::privateIsLogD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLogD; }
inline bool AstNode::privateIsLogIf(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLogIf; }
inline bool AstNode::privateIsLogIff(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLogIff; }
inline bool AstNode::privateIsLogNot(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLogNot; }
inline bool AstNode::privateIsLogOr(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLogOr; }
inline bool AstNode::privateIsLt(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLt; }
inline bool AstNode::privateIsLtD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLtD; }
inline bool AstNode::privateIsLtN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLtN; }
inline bool AstNode::privateIsLtS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLtS; }
inline bool AstNode::privateIsLte(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLte; }
inline bool AstNode::privateIsLteD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLteD; }
inline bool AstNode::privateIsLteN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLteN; }
inline bool AstNode::privateIsLteS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atLteS; }
inline bool AstNode::privateIsMTaskBody(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMTaskBody; }
inline bool AstNode::privateIsMemberDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMemberDType; }
inline bool AstNode::privateIsMemberSel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMemberSel; }
inline bool AstNode::privateIsMethodSel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMethodSel; }
inline bool AstNode::privateIsModDiv(const AstNode* nodep) { return nodep && nodep->type() == AstType::atModDiv; }
inline bool AstNode::privateIsModDivS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atModDivS; }
inline bool AstNode::privateIsModport(const AstNode* nodep) { return nodep && nodep->type() == AstType::atModport; }
inline bool AstNode::privateIsModportFTaskRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atModportFTaskRef; }
inline bool AstNode::privateIsModportVarRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atModportVarRef; }
inline bool AstNode::privateIsModule(const AstNode* nodep) { return nodep && nodep->type() == AstType::atModule; }
inline bool AstNode::privateIsMul(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMul; }
inline bool AstNode::privateIsMulD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMulD; }
inline bool AstNode::privateIsMulS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atMulS; }
inline bool AstNode::privateIsNegate(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNegate; }
inline bool AstNode::privateIsNegateD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNegateD; }
inline bool AstNode::privateIsNeq(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNeq; }
inline bool AstNode::privateIsNeqCase(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNeqCase; }
inline bool AstNode::privateIsNeqD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNeqD; }
inline bool AstNode::privateIsNeqN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNeqN; }
inline bool AstNode::privateIsNeqWild(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNeqWild; }
inline bool AstNode::privateIsNetlist(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNetlist; }
inline bool AstNode::privateIsNode(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNode*>(nodep)); }
inline bool AstNode::privateIsNodeArrayDType(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeArrayDType*>(nodep)); }
inline bool AstNode::privateIsNodeAssign(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeAssign*>(nodep)); }
inline bool AstNode::privateIsNodeBiCom(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeBiCom*>(nodep)); }
inline bool AstNode::privateIsNodeBiComAsv(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeBiComAsv*>(nodep)); }
inline bool AstNode::privateIsNodeBiop(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeBiop*>(nodep)); }
inline bool AstNode::privateIsNodeCase(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeCase*>(nodep)); }
inline bool AstNode::privateIsNodeClassDType(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeClassDType*>(nodep)); }
inline bool AstNode::privateIsNodeCond(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeCond*>(nodep)); }
inline bool AstNode::privateIsNodeDType(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeDType*>(nodep)); }
inline bool AstNode::privateIsNodeFTask(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeFTask*>(nodep)); }
inline bool AstNode::privateIsNodeFTaskRef(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeFTaskRef*>(nodep)); }
inline bool AstNode::privateIsNodeFor(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeFor*>(nodep)); }
inline bool AstNode::privateIsNodeIf(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeIf*>(nodep)); }
inline bool AstNode::privateIsNodeMath(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeMath*>(nodep)); }
inline bool AstNode::privateIsNodeModule(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeModule*>(nodep)); }
inline bool AstNode::privateIsNodePreSel(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodePreSel*>(nodep)); }
inline bool AstNode::privateIsNodePslCoverOrAssert(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodePslCoverOrAssert*>(nodep)); }
inline bool AstNode::privateIsNodeRange(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeRange*>(nodep)); }
inline bool AstNode::privateIsNodeReadWriteMem(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeReadWriteMem*>(nodep)); }
inline bool AstNode::privateIsNodeSel(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeSel*>(nodep)); }
inline bool AstNode::privateIsNodeSenItem(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeSenItem*>(nodep)); }
inline bool AstNode::privateIsNodeStmt(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeStmt*>(nodep)); }
inline bool AstNode::privateIsNodeStream(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeStream*>(nodep)); }
inline bool AstNode::privateIsNodeSystemBiop(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeSystemBiop*>(nodep)); }
inline bool AstNode::privateIsNodeSystemUniop(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeSystemUniop*>(nodep)); }
inline bool AstNode::privateIsNodeTermop(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeTermop*>(nodep)); }
inline bool AstNode::privateIsNodeText(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeText*>(nodep)); }
inline bool AstNode::privateIsNodeTriop(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeTriop*>(nodep)); }
inline bool AstNode::privateIsNodeUniop(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeUniop*>(nodep)); }
inline bool AstNode::privateIsNodeVarRef(const AstNode* nodep) { return (bool)(dynamic_cast<const AstNodeVarRef*>(nodep)); }
inline bool AstNode::privateIsNot(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNot; }
inline bool AstNode::privateIsNotFoundModule(const AstNode* nodep) { return nodep && nodep->type() == AstType::atNotFoundModule; }
inline bool AstNode::privateIsOneHot(const AstNode* nodep) { return nodep && nodep->type() == AstType::atOneHot; }
inline bool AstNode::privateIsOneHot0(const AstNode* nodep) { return nodep && nodep->type() == AstType::atOneHot0; }
inline bool AstNode::privateIsOr(const AstNode* nodep) { return nodep && nodep->type() == AstType::atOr; }
inline bool AstNode::privateIsPackArrayDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPackArrayDType; }
inline bool AstNode::privateIsPackage(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPackage; }
inline bool AstNode::privateIsPackageExport(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPackageExport; }
inline bool AstNode::privateIsPackageExportStarStar(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPackageExportStarStar; }
inline bool AstNode::privateIsPackageImport(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPackageImport; }
inline bool AstNode::privateIsPackageRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPackageRef; }
inline bool AstNode::privateIsParamTypeDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atParamTypeDType; }
inline bool AstNode::privateIsParseRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atParseRef; }
inline bool AstNode::privateIsParseTypeDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atParseTypeDType; }
inline bool AstNode::privateIsPast(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPast; }
inline bool AstNode::privateIsPatMember(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPatMember; }
inline bool AstNode::privateIsPattern(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPattern; }
inline bool AstNode::privateIsPin(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPin; }
inline bool AstNode::privateIsPort(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPort; }
inline bool AstNode::privateIsPow(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPow; }
inline bool AstNode::privateIsPowD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPowD; }
inline bool AstNode::privateIsPowSS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPowSS; }
inline bool AstNode::privateIsPowSU(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPowSU; }
inline bool AstNode::privateIsPowUS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPowUS; }
inline bool AstNode::privateIsPragma(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPragma; }
inline bool AstNode::privateIsPrimitive(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPrimitive; }
inline bool AstNode::privateIsPslAssert(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPslAssert; }
inline bool AstNode::privateIsPslClocked(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPslClocked; }
inline bool AstNode::privateIsPslCover(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPslCover; }
inline bool AstNode::privateIsPslRestrict(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPslRestrict; }
inline bool AstNode::privateIsPull(const AstNode* nodep) { return nodep && nodep->type() == AstType::atPull; }
inline bool AstNode::privateIsRToIRoundS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRToIRoundS; }
inline bool AstNode::privateIsRToIS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRToIS; }
inline bool AstNode::privateIsRand(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRand; }
inline bool AstNode::privateIsRange(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRange; }
inline bool AstNode::privateIsReadMem(const AstNode* nodep) { return nodep && nodep->type() == AstType::atReadMem; }
inline bool AstNode::privateIsRealToBits(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRealToBits; }
inline bool AstNode::privateIsRedAnd(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRedAnd; }
inline bool AstNode::privateIsRedOr(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRedOr; }
inline bool AstNode::privateIsRedXnor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRedXnor; }
inline bool AstNode::privateIsRedXor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRedXor; }
inline bool AstNode::privateIsRefDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRefDType; }
inline bool AstNode::privateIsRepeat(const AstNode* nodep) { return nodep && nodep->type() == AstType::atRepeat; }
inline bool AstNode::privateIsReplicate(const AstNode* nodep) { return nodep && nodep->type() == AstType::atReplicate; }
inline bool AstNode::privateIsReplicateN(const AstNode* nodep) { return nodep && nodep->type() == AstType::atReplicateN; }
inline bool AstNode::privateIsReturn(const AstNode* nodep) { return nodep && nodep->type() == AstType::atReturn; }
inline bool AstNode::privateIsSFormat(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSFormat; }
inline bool AstNode::privateIsSFormatF(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSFormatF; }
inline bool AstNode::privateIsSScanF(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSScanF; }
inline bool AstNode::privateIsScCtor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScCtor; }
inline bool AstNode::privateIsScDtor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScDtor; }
inline bool AstNode::privateIsScHdr(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScHdr; }
inline bool AstNode::privateIsScImp(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScImp; }
inline bool AstNode::privateIsScImpHdr(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScImpHdr; }
inline bool AstNode::privateIsScInt(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScInt; }
inline bool AstNode::privateIsScope(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScope; }
inline bool AstNode::privateIsScopeName(const AstNode* nodep) { return nodep && nodep->type() == AstType::atScopeName; }
inline bool AstNode::privateIsSel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSel; }
inline bool AstNode::privateIsSelBit(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSelBit; }
inline bool AstNode::privateIsSelExtract(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSelExtract; }
inline bool AstNode::privateIsSelMinus(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSelMinus; }
inline bool AstNode::privateIsSelPlus(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSelPlus; }
inline bool AstNode::privateIsSenGate(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSenGate; }
inline bool AstNode::privateIsSenItem(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSenItem; }
inline bool AstNode::privateIsSenTree(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSenTree; }
inline bool AstNode::privateIsShiftL(const AstNode* nodep) { return nodep && nodep->type() == AstType::atShiftL; }
inline bool AstNode::privateIsShiftR(const AstNode* nodep) { return nodep && nodep->type() == AstType::atShiftR; }
inline bool AstNode::privateIsShiftRS(const AstNode* nodep) { return nodep && nodep->type() == AstType::atShiftRS; }
inline bool AstNode::privateIsSigned(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSigned; }
inline bool AstNode::privateIsSinD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSinD; }
inline bool AstNode::privateIsSinhD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSinhD; }
inline bool AstNode::privateIsSliceSel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSliceSel; }
inline bool AstNode::privateIsSplitPlaceholder(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSplitPlaceholder; }
inline bool AstNode::privateIsSqrtD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSqrtD; }
inline bool AstNode::privateIsStop(const AstNode* nodep) { return nodep && nodep->type() == AstType::atStop; }
inline bool AstNode::privateIsStreamL(const AstNode* nodep) { return nodep && nodep->type() == AstType::atStreamL; }
inline bool AstNode::privateIsStreamR(const AstNode* nodep) { return nodep && nodep->type() == AstType::atStreamR; }
inline bool AstNode::privateIsStructDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atStructDType; }
inline bool AstNode::privateIsSub(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSub; }
inline bool AstNode::privateIsSubD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSubD; }
inline bool AstNode::privateIsSysFuncAsTask(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSysFuncAsTask; }
inline bool AstNode::privateIsSysIgnore(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSysIgnore; }
inline bool AstNode::privateIsSystemF(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSystemF; }
inline bool AstNode::privateIsSystemT(const AstNode* nodep) { return nodep && nodep->type() == AstType::atSystemT; }
inline bool AstNode::privateIsTanD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTanD; }
inline bool AstNode::privateIsTanhD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTanhD; }
inline bool AstNode::privateIsTask(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTask; }
inline bool AstNode::privateIsTaskRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTaskRef; }
inline bool AstNode::privateIsTestPlusArgs(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTestPlusArgs; }
inline bool AstNode::privateIsText(const AstNode* nodep) { return nodep && nodep->type() == AstType::atText; }
inline bool AstNode::privateIsTime(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTime; }
inline bool AstNode::privateIsTimeD(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTimeD; }
inline bool AstNode::privateIsTopScope(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTopScope; }
inline bool AstNode::privateIsTraceDecl(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTraceDecl; }
inline bool AstNode::privateIsTraceInc(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTraceInc; }
inline bool AstNode::privateIsTypeTable(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTypeTable; }
inline bool AstNode::privateIsTypedef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTypedef; }
inline bool AstNode::privateIsTypedefFwd(const AstNode* nodep) { return nodep && nodep->type() == AstType::atTypedefFwd; }
inline bool AstNode::privateIsUCFunc(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUCFunc; }
inline bool AstNode::privateIsUCStmt(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUCStmt; }
inline bool AstNode::privateIsUdpTable(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUdpTable; }
inline bool AstNode::privateIsUdpTableLine(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUdpTableLine; }
inline bool AstNode::privateIsUnionDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUnionDType; }
inline bool AstNode::privateIsUnlinkedRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUnlinkedRef; }
inline bool AstNode::privateIsUnpackArrayDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUnpackArrayDType; }
inline bool AstNode::privateIsUnsigned(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUnsigned; }
inline bool AstNode::privateIsUnsizedArrayDType(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUnsizedArrayDType; }
inline bool AstNode::privateIsUnsizedRange(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUnsizedRange; }
inline bool AstNode::privateIsUntilStable(const AstNode* nodep) { return nodep && nodep->type() == AstType::atUntilStable; }
inline bool AstNode::privateIsVAssert(const AstNode* nodep) { return nodep && nodep->type() == AstType::atVAssert; }
inline bool AstNode::privateIsValuePlusArgs(const AstNode* nodep) { return nodep && nodep->type() == AstType::atValuePlusArgs; }
inline bool AstNode::privateIsVar(const AstNode* nodep) { return nodep && nodep->type() == AstType::atVar; }
inline bool AstNode::privateIsVarRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atVarRef; }
inline bool AstNode::privateIsVarScope(const AstNode* nodep) { return nodep && nodep->type() == AstType::atVarScope; }
inline bool AstNode::privateIsVarXRef(const AstNode* nodep) { return nodep && nodep->type() == AstType::atVarXRef; }
inline bool AstNode::privateIsWhile(const AstNode* nodep) { return nodep && nodep->type() == AstType::atWhile; }
inline bool AstNode::privateIsWordSel(const AstNode* nodep) { return nodep && nodep->type() == AstType::atWordSel; }
inline bool AstNode::privateIsWriteMem(const AstNode* nodep) { return nodep && nodep->type() == AstType::atWriteMem; }
inline bool AstNode::privateIsXnor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atXnor; }
inline bool AstNode::privateIsXor(const AstNode* nodep) { return nodep && nodep->type() == AstType::atXor; }
inline AstAcosD* AstNode::privateCastAcosD(AstNode* nodep) { return dynamic_cast<AstAcosD*>(nodep); }
inline AstAcoshD* AstNode::privateCastAcoshD(AstNode* nodep) { return dynamic_cast<AstAcoshD*>(nodep); }
inline AstActive* AstNode::privateCastActive(AstNode* nodep) { return dynamic_cast<AstActive*>(nodep); }
inline AstAdd* AstNode::privateCastAdd(AstNode* nodep) { return dynamic_cast<AstAdd*>(nodep); }
inline AstAddD* AstNode::privateCastAddD(AstNode* nodep) { return dynamic_cast<AstAddD*>(nodep); }
inline AstAlways* AstNode::privateCastAlways(AstNode* nodep) { return dynamic_cast<AstAlways*>(nodep); }
inline AstAlwaysPost* AstNode::privateCastAlwaysPost(AstNode* nodep) { return dynamic_cast<AstAlwaysPost*>(nodep); }
inline AstAlwaysPublic* AstNode::privateCastAlwaysPublic(AstNode* nodep) { return dynamic_cast<AstAlwaysPublic*>(nodep); }
inline AstAnd* AstNode::privateCastAnd(AstNode* nodep) { return dynamic_cast<AstAnd*>(nodep); }
inline AstArg* AstNode::privateCastArg(AstNode* nodep) { return dynamic_cast<AstArg*>(nodep); }
inline AstArraySel* AstNode::privateCastArraySel(AstNode* nodep) { return dynamic_cast<AstArraySel*>(nodep); }
inline AstAsinD* AstNode::privateCastAsinD(AstNode* nodep) { return dynamic_cast<AstAsinD*>(nodep); }
inline AstAsinhD* AstNode::privateCastAsinhD(AstNode* nodep) { return dynamic_cast<AstAsinhD*>(nodep); }
inline AstAssign* AstNode::privateCastAssign(AstNode* nodep) { return dynamic_cast<AstAssign*>(nodep); }
inline AstAssignAlias* AstNode::privateCastAssignAlias(AstNode* nodep) { return dynamic_cast<AstAssignAlias*>(nodep); }
inline AstAssignDly* AstNode::privateCastAssignDly(AstNode* nodep) { return dynamic_cast<AstAssignDly*>(nodep); }
inline AstAssignPost* AstNode::privateCastAssignPost(AstNode* nodep) { return dynamic_cast<AstAssignPost*>(nodep); }
inline AstAssignPre* AstNode::privateCastAssignPre(AstNode* nodep) { return dynamic_cast<AstAssignPre*>(nodep); }
inline AstAssignVarScope* AstNode::privateCastAssignVarScope(AstNode* nodep) { return dynamic_cast<AstAssignVarScope*>(nodep); }
inline AstAssignW* AstNode::privateCastAssignW(AstNode* nodep) { return dynamic_cast<AstAssignW*>(nodep); }
inline AstAtan2D* AstNode::privateCastAtan2D(AstNode* nodep) { return dynamic_cast<AstAtan2D*>(nodep); }
inline AstAtanD* AstNode::privateCastAtanD(AstNode* nodep) { return dynamic_cast<AstAtanD*>(nodep); }
inline AstAtanhD* AstNode::privateCastAtanhD(AstNode* nodep) { return dynamic_cast<AstAtanhD*>(nodep); }
inline AstAttrOf* AstNode::privateCastAttrOf(AstNode* nodep) { return dynamic_cast<AstAttrOf*>(nodep); }
inline AstBasicDType* AstNode::privateCastBasicDType(AstNode* nodep) { return dynamic_cast<AstBasicDType*>(nodep); }
inline AstBegin* AstNode::privateCastBegin(AstNode* nodep) { return dynamic_cast<AstBegin*>(nodep); }
inline AstBind* AstNode::privateCastBind(AstNode* nodep) { return dynamic_cast<AstBind*>(nodep); }
inline AstBitsToRealD* AstNode::privateCastBitsToRealD(AstNode* nodep) { return dynamic_cast<AstBitsToRealD*>(nodep); }
inline AstBreak* AstNode::privateCastBreak(AstNode* nodep) { return dynamic_cast<AstBreak*>(nodep); }
inline AstBufIf1* AstNode::privateCastBufIf1(AstNode* nodep) { return dynamic_cast<AstBufIf1*>(nodep); }
inline AstCCall* AstNode::privateCastCCall(AstNode* nodep) { return dynamic_cast<AstCCall*>(nodep); }
inline AstCCast* AstNode::privateCastCCast(AstNode* nodep) { return dynamic_cast<AstCCast*>(nodep); }
inline AstCFile* AstNode::privateCastCFile(AstNode* nodep) { return dynamic_cast<AstCFile*>(nodep); }
inline AstCFunc* AstNode::privateCastCFunc(AstNode* nodep) { return dynamic_cast<AstCFunc*>(nodep); }
inline AstCLog2* AstNode::privateCastCLog2(AstNode* nodep) { return dynamic_cast<AstCLog2*>(nodep); }
inline AstCMath* AstNode::privateCastCMath(AstNode* nodep) { return dynamic_cast<AstCMath*>(nodep); }
inline AstCReset* AstNode::privateCastCReset(AstNode* nodep) { return dynamic_cast<AstCReset*>(nodep); }
inline AstCReturn* AstNode::privateCastCReturn(AstNode* nodep) { return dynamic_cast<AstCReturn*>(nodep); }
inline AstCStmt* AstNode::privateCastCStmt(AstNode* nodep) { return dynamic_cast<AstCStmt*>(nodep); }
inline AstCase* AstNode::privateCastCase(AstNode* nodep) { return dynamic_cast<AstCase*>(nodep); }
inline AstCaseItem* AstNode::privateCastCaseItem(AstNode* nodep) { return dynamic_cast<AstCaseItem*>(nodep); }
inline AstCast* AstNode::privateCastCast(AstNode* nodep) { return dynamic_cast<AstCast*>(nodep); }
inline AstCastParse* AstNode::privateCastCastParse(AstNode* nodep) { return dynamic_cast<AstCastParse*>(nodep); }
inline AstCastSize* AstNode::privateCastCastSize(AstNode* nodep) { return dynamic_cast<AstCastSize*>(nodep); }
inline AstCeilD* AstNode::privateCastCeilD(AstNode* nodep) { return dynamic_cast<AstCeilD*>(nodep); }
inline AstCell* AstNode::privateCastCell(AstNode* nodep) { return dynamic_cast<AstCell*>(nodep); }
inline AstCellArrayRef* AstNode::privateCastCellArrayRef(AstNode* nodep) { return dynamic_cast<AstCellArrayRef*>(nodep); }
inline AstCellInline* AstNode::privateCastCellInline(AstNode* nodep) { return dynamic_cast<AstCellInline*>(nodep); }
inline AstCellRef* AstNode::privateCastCellRef(AstNode* nodep) { return dynamic_cast<AstCellRef*>(nodep); }
inline AstChangeDet* AstNode::privateCastChangeDet(AstNode* nodep) { return dynamic_cast<AstChangeDet*>(nodep); }
inline AstChangeXor* AstNode::privateCastChangeXor(AstNode* nodep) { return dynamic_cast<AstChangeXor*>(nodep); }
inline AstClocking* AstNode::privateCastClocking(AstNode* nodep) { return dynamic_cast<AstClocking*>(nodep); }
inline AstComment* AstNode::privateCastComment(AstNode* nodep) { return dynamic_cast<AstComment*>(nodep); }
inline AstConcat* AstNode::privateCastConcat(AstNode* nodep) { return dynamic_cast<AstConcat*>(nodep); }
inline AstConcatN* AstNode::privateCastConcatN(AstNode* nodep) { return dynamic_cast<AstConcatN*>(nodep); }
inline AstCond* AstNode::privateCastCond(AstNode* nodep) { return dynamic_cast<AstCond*>(nodep); }
inline AstCondBound* AstNode::privateCastCondBound(AstNode* nodep) { return dynamic_cast<AstCondBound*>(nodep); }
inline AstConst* AstNode::privateCastConst(AstNode* nodep) { return dynamic_cast<AstConst*>(nodep); }
inline AstConstDType* AstNode::privateCastConstDType(AstNode* nodep) { return dynamic_cast<AstConstDType*>(nodep); }
inline AstContinue* AstNode::privateCastContinue(AstNode* nodep) { return dynamic_cast<AstContinue*>(nodep); }
inline AstCosD* AstNode::privateCastCosD(AstNode* nodep) { return dynamic_cast<AstCosD*>(nodep); }
inline AstCoshD* AstNode::privateCastCoshD(AstNode* nodep) { return dynamic_cast<AstCoshD*>(nodep); }
inline AstCountOnes* AstNode::privateCastCountOnes(AstNode* nodep) { return dynamic_cast<AstCountOnes*>(nodep); }
inline AstCoverDecl* AstNode::privateCastCoverDecl(AstNode* nodep) { return dynamic_cast<AstCoverDecl*>(nodep); }
inline AstCoverInc* AstNode::privateCastCoverInc(AstNode* nodep) { return dynamic_cast<AstCoverInc*>(nodep); }
inline AstCoverToggle* AstNode::privateCastCoverToggle(AstNode* nodep) { return dynamic_cast<AstCoverToggle*>(nodep); }
inline AstCvtPackString* AstNode::privateCastCvtPackString(AstNode* nodep) { return dynamic_cast<AstCvtPackString*>(nodep); }
inline AstDefImplicitDType* AstNode::privateCastDefImplicitDType(AstNode* nodep) { return dynamic_cast<AstDefImplicitDType*>(nodep); }
inline AstDefParam* AstNode::privateCastDefParam(AstNode* nodep) { return dynamic_cast<AstDefParam*>(nodep); }
inline AstDisable* AstNode::privateCastDisable(AstNode* nodep) { return dynamic_cast<AstDisable*>(nodep); }
inline AstDisplay* AstNode::privateCastDisplay(AstNode* nodep) { return dynamic_cast<AstDisplay*>(nodep); }
inline AstDiv* AstNode::privateCastDiv(AstNode* nodep) { return dynamic_cast<AstDiv*>(nodep); }
inline AstDivD* AstNode::privateCastDivD(AstNode* nodep) { return dynamic_cast<AstDivD*>(nodep); }
inline AstDivS* AstNode::privateCastDivS(AstNode* nodep) { return dynamic_cast<AstDivS*>(nodep); }
inline AstDot* AstNode::privateCastDot(AstNode* nodep) { return dynamic_cast<AstDot*>(nodep); }
inline AstDpiExport* AstNode::privateCastDpiExport(AstNode* nodep) { return dynamic_cast<AstDpiExport*>(nodep); }
inline AstEnumDType* AstNode::privateCastEnumDType(AstNode* nodep) { return dynamic_cast<AstEnumDType*>(nodep); }
inline AstEnumItem* AstNode::privateCastEnumItem(AstNode* nodep) { return dynamic_cast<AstEnumItem*>(nodep); }
inline AstEnumItemRef* AstNode::privateCastEnumItemRef(AstNode* nodep) { return dynamic_cast<AstEnumItemRef*>(nodep); }
inline AstEq* AstNode::privateCastEq(AstNode* nodep) { return dynamic_cast<AstEq*>(nodep); }
inline AstEqCase* AstNode::privateCastEqCase(AstNode* nodep) { return dynamic_cast<AstEqCase*>(nodep); }
inline AstEqD* AstNode::privateCastEqD(AstNode* nodep) { return dynamic_cast<AstEqD*>(nodep); }
inline AstEqN* AstNode::privateCastEqN(AstNode* nodep) { return dynamic_cast<AstEqN*>(nodep); }
inline AstEqWild* AstNode::privateCastEqWild(AstNode* nodep) { return dynamic_cast<AstEqWild*>(nodep); }
inline AstExecGraph* AstNode::privateCastExecGraph(AstNode* nodep) { return dynamic_cast<AstExecGraph*>(nodep); }
inline AstExpD* AstNode::privateCastExpD(AstNode* nodep) { return dynamic_cast<AstExpD*>(nodep); }
inline AstExtend* AstNode::privateCastExtend(AstNode* nodep) { return dynamic_cast<AstExtend*>(nodep); }
inline AstExtendS* AstNode::privateCastExtendS(AstNode* nodep) { return dynamic_cast<AstExtendS*>(nodep); }
inline AstFClose* AstNode::privateCastFClose(AstNode* nodep) { return dynamic_cast<AstFClose*>(nodep); }
inline AstFEof* AstNode::privateCastFEof(AstNode* nodep) { return dynamic_cast<AstFEof*>(nodep); }
inline AstFFlush* AstNode::privateCastFFlush(AstNode* nodep) { return dynamic_cast<AstFFlush*>(nodep); }
inline AstFGetC* AstNode::privateCastFGetC(AstNode* nodep) { return dynamic_cast<AstFGetC*>(nodep); }
inline AstFGetS* AstNode::privateCastFGetS(AstNode* nodep) { return dynamic_cast<AstFGetS*>(nodep); }
inline AstFOpen* AstNode::privateCastFOpen(AstNode* nodep) { return dynamic_cast<AstFOpen*>(nodep); }
inline AstFRead* AstNode::privateCastFRead(AstNode* nodep) { return dynamic_cast<AstFRead*>(nodep); }
inline AstFScanF* AstNode::privateCastFScanF(AstNode* nodep) { return dynamic_cast<AstFScanF*>(nodep); }
inline AstFinal* AstNode::privateCastFinal(AstNode* nodep) { return dynamic_cast<AstFinal*>(nodep); }
inline AstFinish* AstNode::privateCastFinish(AstNode* nodep) { return dynamic_cast<AstFinish*>(nodep); }
inline AstFloorD* AstNode::privateCastFloorD(AstNode* nodep) { return dynamic_cast<AstFloorD*>(nodep); }
inline AstForeach* AstNode::privateCastForeach(AstNode* nodep) { return dynamic_cast<AstForeach*>(nodep); }
inline AstFunc* AstNode::privateCastFunc(AstNode* nodep) { return dynamic_cast<AstFunc*>(nodep); }
inline AstFuncRef* AstNode::privateCastFuncRef(AstNode* nodep) { return dynamic_cast<AstFuncRef*>(nodep); }
inline AstGatePin* AstNode::privateCastGatePin(AstNode* nodep) { return dynamic_cast<AstGatePin*>(nodep); }
inline AstGenCase* AstNode::privateCastGenCase(AstNode* nodep) { return dynamic_cast<AstGenCase*>(nodep); }
inline AstGenFor* AstNode::privateCastGenFor(AstNode* nodep) { return dynamic_cast<AstGenFor*>(nodep); }
inline AstGenIf* AstNode::privateCastGenIf(AstNode* nodep) { return dynamic_cast<AstGenIf*>(nodep); }
inline AstGenerate* AstNode::privateCastGenerate(AstNode* nodep) { return dynamic_cast<AstGenerate*>(nodep); }
inline AstGt* AstNode::privateCastGt(AstNode* nodep) { return dynamic_cast<AstGt*>(nodep); }
inline AstGtD* AstNode::privateCastGtD(AstNode* nodep) { return dynamic_cast<AstGtD*>(nodep); }
inline AstGtN* AstNode::privateCastGtN(AstNode* nodep) { return dynamic_cast<AstGtN*>(nodep); }
inline AstGtS* AstNode::privateCastGtS(AstNode* nodep) { return dynamic_cast<AstGtS*>(nodep); }
inline AstGte* AstNode::privateCastGte(AstNode* nodep) { return dynamic_cast<AstGte*>(nodep); }
inline AstGteD* AstNode::privateCastGteD(AstNode* nodep) { return dynamic_cast<AstGteD*>(nodep); }
inline AstGteN* AstNode::privateCastGteN(AstNode* nodep) { return dynamic_cast<AstGteN*>(nodep); }
inline AstGteS* AstNode::privateCastGteS(AstNode* nodep) { return dynamic_cast<AstGteS*>(nodep); }
inline AstHypotD* AstNode::privateCastHypotD(AstNode* nodep) { return dynamic_cast<AstHypotD*>(nodep); }
inline AstIToRD* AstNode::privateCastIToRD(AstNode* nodep) { return dynamic_cast<AstIToRD*>(nodep); }
inline AstIf* AstNode::privateCastIf(AstNode* nodep) { return dynamic_cast<AstIf*>(nodep); }
inline AstIface* AstNode::privateCastIface(AstNode* nodep) { return dynamic_cast<AstIface*>(nodep); }
inline AstIfaceRefDType* AstNode::privateCastIfaceRefDType(AstNode* nodep) { return dynamic_cast<AstIfaceRefDType*>(nodep); }
inline AstImplicit* AstNode::privateCastImplicit(AstNode* nodep) { return dynamic_cast<AstImplicit*>(nodep); }
inline AstInitArray* AstNode::privateCastInitArray(AstNode* nodep) { return dynamic_cast<AstInitArray*>(nodep); }
inline AstInitial* AstNode::privateCastInitial(AstNode* nodep) { return dynamic_cast<AstInitial*>(nodep); }
inline AstInside* AstNode::privateCastInside(AstNode* nodep) { return dynamic_cast<AstInside*>(nodep); }
inline AstInsideRange* AstNode::privateCastInsideRange(AstNode* nodep) { return dynamic_cast<AstInsideRange*>(nodep); }
inline AstIsUnknown* AstNode::privateCastIsUnknown(AstNode* nodep) { return dynamic_cast<AstIsUnknown*>(nodep); }
inline AstJumpGo* AstNode::privateCastJumpGo(AstNode* nodep) { return dynamic_cast<AstJumpGo*>(nodep); }
inline AstJumpLabel* AstNode::privateCastJumpLabel(AstNode* nodep) { return dynamic_cast<AstJumpLabel*>(nodep); }
inline AstLenN* AstNode::privateCastLenN(AstNode* nodep) { return dynamic_cast<AstLenN*>(nodep); }
inline AstLog10D* AstNode::privateCastLog10D(AstNode* nodep) { return dynamic_cast<AstLog10D*>(nodep); }
inline AstLogAnd* AstNode::privateCastLogAnd(AstNode* nodep) { return dynamic_cast<AstLogAnd*>(nodep); }
inline AstLogD* AstNode::privateCastLogD(AstNode* nodep) { return dynamic_cast<AstLogD*>(nodep); }
inline AstLogIf* AstNode::privateCastLogIf(AstNode* nodep) { return dynamic_cast<AstLogIf*>(nodep); }
inline AstLogIff* AstNode::privateCastLogIff(AstNode* nodep) { return dynamic_cast<AstLogIff*>(nodep); }
inline AstLogNot* AstNode::privateCastLogNot(AstNode* nodep) { return dynamic_cast<AstLogNot*>(nodep); }
inline AstLogOr* AstNode::privateCastLogOr(AstNode* nodep) { return dynamic_cast<AstLogOr*>(nodep); }
inline AstLt* AstNode::privateCastLt(AstNode* nodep) { return dynamic_cast<AstLt*>(nodep); }
inline AstLtD* AstNode::privateCastLtD(AstNode* nodep) { return dynamic_cast<AstLtD*>(nodep); }
inline AstLtN* AstNode::privateCastLtN(AstNode* nodep) { return dynamic_cast<AstLtN*>(nodep); }
inline AstLtS* AstNode::privateCastLtS(AstNode* nodep) { return dynamic_cast<AstLtS*>(nodep); }
inline AstLte* AstNode::privateCastLte(AstNode* nodep) { return dynamic_cast<AstLte*>(nodep); }
inline AstLteD* AstNode::privateCastLteD(AstNode* nodep) { return dynamic_cast<AstLteD*>(nodep); }
inline AstLteN* AstNode::privateCastLteN(AstNode* nodep) { return dynamic_cast<AstLteN*>(nodep); }
inline AstLteS* AstNode::privateCastLteS(AstNode* nodep) { return dynamic_cast<AstLteS*>(nodep); }
inline AstMTaskBody* AstNode::privateCastMTaskBody(AstNode* nodep) { return dynamic_cast<AstMTaskBody*>(nodep); }
inline AstMemberDType* AstNode::privateCastMemberDType(AstNode* nodep) { return dynamic_cast<AstMemberDType*>(nodep); }
inline AstMemberSel* AstNode::privateCastMemberSel(AstNode* nodep) { return dynamic_cast<AstMemberSel*>(nodep); }
inline AstMethodSel* AstNode::privateCastMethodSel(AstNode* nodep) { return dynamic_cast<AstMethodSel*>(nodep); }
inline AstModDiv* AstNode::privateCastModDiv(AstNode* nodep) { return dynamic_cast<AstModDiv*>(nodep); }
inline AstModDivS* AstNode::privateCastModDivS(AstNode* nodep) { return dynamic_cast<AstModDivS*>(nodep); }
inline AstModport* AstNode::privateCastModport(AstNode* nodep) { return dynamic_cast<AstModport*>(nodep); }
inline AstModportFTaskRef* AstNode::privateCastModportFTaskRef(AstNode* nodep) { return dynamic_cast<AstModportFTaskRef*>(nodep); }
inline AstModportVarRef* AstNode::privateCastModportVarRef(AstNode* nodep) { return dynamic_cast<AstModportVarRef*>(nodep); }
inline AstModule* AstNode::privateCastModule(AstNode* nodep) { return dynamic_cast<AstModule*>(nodep); }
inline AstMul* AstNode::privateCastMul(AstNode* nodep) { return dynamic_cast<AstMul*>(nodep); }
inline AstMulD* AstNode::privateCastMulD(AstNode* nodep) { return dynamic_cast<AstMulD*>(nodep); }
inline AstMulS* AstNode::privateCastMulS(AstNode* nodep) { return dynamic_cast<AstMulS*>(nodep); }
inline AstNegate* AstNode::privateCastNegate(AstNode* nodep) { return dynamic_cast<AstNegate*>(nodep); }
inline AstNegateD* AstNode::privateCastNegateD(AstNode* nodep) { return dynamic_cast<AstNegateD*>(nodep); }
inline AstNeq* AstNode::privateCastNeq(AstNode* nodep) { return dynamic_cast<AstNeq*>(nodep); }
inline AstNeqCase* AstNode::privateCastNeqCase(AstNode* nodep) { return dynamic_cast<AstNeqCase*>(nodep); }
inline AstNeqD* AstNode::privateCastNeqD(AstNode* nodep) { return dynamic_cast<AstNeqD*>(nodep); }
inline AstNeqN* AstNode::privateCastNeqN(AstNode* nodep) { return dynamic_cast<AstNeqN*>(nodep); }
inline AstNeqWild* AstNode::privateCastNeqWild(AstNode* nodep) { return dynamic_cast<AstNeqWild*>(nodep); }
inline AstNetlist* AstNode::privateCastNetlist(AstNode* nodep) { return dynamic_cast<AstNetlist*>(nodep); }
inline AstNode* AstNode::privateCastNode(AstNode* nodep) { return dynamic_cast<AstNode*>(nodep); }
inline AstNodeArrayDType* AstNode::privateCastNodeArrayDType(AstNode* nodep) { return dynamic_cast<AstNodeArrayDType*>(nodep); }
inline AstNodeAssign* AstNode::privateCastNodeAssign(AstNode* nodep) { return dynamic_cast<AstNodeAssign*>(nodep); }
inline AstNodeBiCom* AstNode::privateCastNodeBiCom(AstNode* nodep) { return dynamic_cast<AstNodeBiCom*>(nodep); }
inline AstNodeBiComAsv* AstNode::privateCastNodeBiComAsv(AstNode* nodep) { return dynamic_cast<AstNodeBiComAsv*>(nodep); }
inline AstNodeBiop* AstNode::privateCastNodeBiop(AstNode* nodep) { return dynamic_cast<AstNodeBiop*>(nodep); }
inline AstNodeCase* AstNode::privateCastNodeCase(AstNode* nodep) { return dynamic_cast<AstNodeCase*>(nodep); }
inline AstNodeClassDType* AstNode::privateCastNodeClassDType(AstNode* nodep) { return dynamic_cast<AstNodeClassDType*>(nodep); }
inline AstNodeCond* AstNode::privateCastNodeCond(AstNode* nodep) { return dynamic_cast<AstNodeCond*>(nodep); }
inline AstNodeDType* AstNode::privateCastNodeDType(AstNode* nodep) { return dynamic_cast<AstNodeDType*>(nodep); }
inline AstNodeFTask* AstNode::privateCastNodeFTask(AstNode* nodep) { return dynamic_cast<AstNodeFTask*>(nodep); }
inline AstNodeFTaskRef* AstNode::privateCastNodeFTaskRef(AstNode* nodep) { return dynamic_cast<AstNodeFTaskRef*>(nodep); }
inline AstNodeFor* AstNode::privateCastNodeFor(AstNode* nodep) { return dynamic_cast<AstNodeFor*>(nodep); }
inline AstNodeIf* AstNode::privateCastNodeIf(AstNode* nodep) { return dynamic_cast<AstNodeIf*>(nodep); }
inline AstNodeMath* AstNode::privateCastNodeMath(AstNode* nodep) { return dynamic_cast<AstNodeMath*>(nodep); }
inline AstNodeModule* AstNode::privateCastNodeModule(AstNode* nodep) { return dynamic_cast<AstNodeModule*>(nodep); }
inline AstNodePreSel* AstNode::privateCastNodePreSel(AstNode* nodep) { return dynamic_cast<AstNodePreSel*>(nodep); }
inline AstNodePslCoverOrAssert* AstNode::privateCastNodePslCoverOrAssert(AstNode* nodep) { return dynamic_cast<AstNodePslCoverOrAssert*>(nodep); }
inline AstNodeRange* AstNode::privateCastNodeRange(AstNode* nodep) { return dynamic_cast<AstNodeRange*>(nodep); }
inline AstNodeReadWriteMem* AstNode::privateCastNodeReadWriteMem(AstNode* nodep) { return dynamic_cast<AstNodeReadWriteMem*>(nodep); }
inline AstNodeSel* AstNode::privateCastNodeSel(AstNode* nodep) { return dynamic_cast<AstNodeSel*>(nodep); }
inline AstNodeSenItem* AstNode::privateCastNodeSenItem(AstNode* nodep) { return dynamic_cast<AstNodeSenItem*>(nodep); }
inline AstNodeStmt* AstNode::privateCastNodeStmt(AstNode* nodep) { return dynamic_cast<AstNodeStmt*>(nodep); }
inline AstNodeStream* AstNode::privateCastNodeStream(AstNode* nodep) { return dynamic_cast<AstNodeStream*>(nodep); }
inline AstNodeSystemBiop* AstNode::privateCastNodeSystemBiop(AstNode* nodep) { return dynamic_cast<AstNodeSystemBiop*>(nodep); }
inline AstNodeSystemUniop* AstNode::privateCastNodeSystemUniop(AstNode* nodep) { return dynamic_cast<AstNodeSystemUniop*>(nodep); }
inline AstNodeTermop* AstNode::privateCastNodeTermop(AstNode* nodep) { return dynamic_cast<AstNodeTermop*>(nodep); }
inline AstNodeText* AstNode::privateCastNodeText(AstNode* nodep) { return dynamic_cast<AstNodeText*>(nodep); }
inline AstNodeTriop* AstNode::privateCastNodeTriop(AstNode* nodep) { return dynamic_cast<AstNodeTriop*>(nodep); }
inline AstNodeUniop* AstNode::privateCastNodeUniop(AstNode* nodep) { return dynamic_cast<AstNodeUniop*>(nodep); }
inline AstNodeVarRef* AstNode::privateCastNodeVarRef(AstNode* nodep) { return dynamic_cast<AstNodeVarRef*>(nodep); }
inline AstNot* AstNode::privateCastNot(AstNode* nodep) { return dynamic_cast<AstNot*>(nodep); }
inline AstNotFoundModule* AstNode::privateCastNotFoundModule(AstNode* nodep) { return dynamic_cast<AstNotFoundModule*>(nodep); }
inline AstOneHot* AstNode::privateCastOneHot(AstNode* nodep) { return dynamic_cast<AstOneHot*>(nodep); }
inline AstOneHot0* AstNode::privateCastOneHot0(AstNode* nodep) { return dynamic_cast<AstOneHot0*>(nodep); }
inline AstOr* AstNode::privateCastOr(AstNode* nodep) { return dynamic_cast<AstOr*>(nodep); }
inline AstPackArrayDType* AstNode::privateCastPackArrayDType(AstNode* nodep) { return dynamic_cast<AstPackArrayDType*>(nodep); }
inline AstPackage* AstNode::privateCastPackage(AstNode* nodep) { return dynamic_cast<AstPackage*>(nodep); }
inline AstPackageExport* AstNode::privateCastPackageExport(AstNode* nodep) { return dynamic_cast<AstPackageExport*>(nodep); }
inline AstPackageExportStarStar* AstNode::privateCastPackageExportStarStar(AstNode* nodep) { return dynamic_cast<AstPackageExportStarStar*>(nodep); }
inline AstPackageImport* AstNode::privateCastPackageImport(AstNode* nodep) { return dynamic_cast<AstPackageImport*>(nodep); }
inline AstPackageRef* AstNode::privateCastPackageRef(AstNode* nodep) { return dynamic_cast<AstPackageRef*>(nodep); }
inline AstParamTypeDType* AstNode::privateCastParamTypeDType(AstNode* nodep) { return dynamic_cast<AstParamTypeDType*>(nodep); }
inline AstParseRef* AstNode::privateCastParseRef(AstNode* nodep) { return dynamic_cast<AstParseRef*>(nodep); }
inline AstParseTypeDType* AstNode::privateCastParseTypeDType(AstNode* nodep) { return dynamic_cast<AstParseTypeDType*>(nodep); }
inline AstPast* AstNode::privateCastPast(AstNode* nodep) { return dynamic_cast<AstPast*>(nodep); }
inline AstPatMember* AstNode::privateCastPatMember(AstNode* nodep) { return dynamic_cast<AstPatMember*>(nodep); }
inline AstPattern* AstNode::privateCastPattern(AstNode* nodep) { return dynamic_cast<AstPattern*>(nodep); }
inline AstPin* AstNode::privateCastPin(AstNode* nodep) { return dynamic_cast<AstPin*>(nodep); }
inline AstPort* AstNode::privateCastPort(AstNode* nodep) { return dynamic_cast<AstPort*>(nodep); }
inline AstPow* AstNode::privateCastPow(AstNode* nodep) { return dynamic_cast<AstPow*>(nodep); }
inline AstPowD* AstNode::privateCastPowD(AstNode* nodep) { return dynamic_cast<AstPowD*>(nodep); }
inline AstPowSS* AstNode::privateCastPowSS(AstNode* nodep) { return dynamic_cast<AstPowSS*>(nodep); }
inline AstPowSU* AstNode::privateCastPowSU(AstNode* nodep) { return dynamic_cast<AstPowSU*>(nodep); }
inline AstPowUS* AstNode::privateCastPowUS(AstNode* nodep) { return dynamic_cast<AstPowUS*>(nodep); }
inline AstPragma* AstNode::privateCastPragma(AstNode* nodep) { return dynamic_cast<AstPragma*>(nodep); }
inline AstPrimitive* AstNode::privateCastPrimitive(AstNode* nodep) { return dynamic_cast<AstPrimitive*>(nodep); }
inline AstPslAssert* AstNode::privateCastPslAssert(AstNode* nodep) { return dynamic_cast<AstPslAssert*>(nodep); }
inline AstPslClocked* AstNode::privateCastPslClocked(AstNode* nodep) { return dynamic_cast<AstPslClocked*>(nodep); }
inline AstPslCover* AstNode::privateCastPslCover(AstNode* nodep) { return dynamic_cast<AstPslCover*>(nodep); }
inline AstPslRestrict* AstNode::privateCastPslRestrict(AstNode* nodep) { return dynamic_cast<AstPslRestrict*>(nodep); }
inline AstPull* AstNode::privateCastPull(AstNode* nodep) { return dynamic_cast<AstPull*>(nodep); }
inline AstRToIRoundS* AstNode::privateCastRToIRoundS(AstNode* nodep) { return dynamic_cast<AstRToIRoundS*>(nodep); }
inline AstRToIS* AstNode::privateCastRToIS(AstNode* nodep) { return dynamic_cast<AstRToIS*>(nodep); }
inline AstRand* AstNode::privateCastRand(AstNode* nodep) { return dynamic_cast<AstRand*>(nodep); }
inline AstRange* AstNode::privateCastRange(AstNode* nodep) { return dynamic_cast<AstRange*>(nodep); }
inline AstReadMem* AstNode::privateCastReadMem(AstNode* nodep) { return dynamic_cast<AstReadMem*>(nodep); }
inline AstRealToBits* AstNode::privateCastRealToBits(AstNode* nodep) { return dynamic_cast<AstRealToBits*>(nodep); }
inline AstRedAnd* AstNode::privateCastRedAnd(AstNode* nodep) { return dynamic_cast<AstRedAnd*>(nodep); }
inline AstRedOr* AstNode::privateCastRedOr(AstNode* nodep) { return dynamic_cast<AstRedOr*>(nodep); }
inline AstRedXnor* AstNode::privateCastRedXnor(AstNode* nodep) { return dynamic_cast<AstRedXnor*>(nodep); }
inline AstRedXor* AstNode::privateCastRedXor(AstNode* nodep) { return dynamic_cast<AstRedXor*>(nodep); }
inline AstRefDType* AstNode::privateCastRefDType(AstNode* nodep) { return dynamic_cast<AstRefDType*>(nodep); }
inline AstRepeat* AstNode::privateCastRepeat(AstNode* nodep) { return dynamic_cast<AstRepeat*>(nodep); }
inline AstReplicate* AstNode::privateCastReplicate(AstNode* nodep) { return dynamic_cast<AstReplicate*>(nodep); }
inline AstReplicateN* AstNode::privateCastReplicateN(AstNode* nodep) { return dynamic_cast<AstReplicateN*>(nodep); }
inline AstReturn* AstNode::privateCastReturn(AstNode* nodep) { return dynamic_cast<AstReturn*>(nodep); }
inline AstSFormat* AstNode::privateCastSFormat(AstNode* nodep) { return dynamic_cast<AstSFormat*>(nodep); }
inline AstSFormatF* AstNode::privateCastSFormatF(AstNode* nodep) { return dynamic_cast<AstSFormatF*>(nodep); }
inline AstSScanF* AstNode::privateCastSScanF(AstNode* nodep) { return dynamic_cast<AstSScanF*>(nodep); }
inline AstScCtor* AstNode::privateCastScCtor(AstNode* nodep) { return dynamic_cast<AstScCtor*>(nodep); }
inline AstScDtor* AstNode::privateCastScDtor(AstNode* nodep) { return dynamic_cast<AstScDtor*>(nodep); }
inline AstScHdr* AstNode::privateCastScHdr(AstNode* nodep) { return dynamic_cast<AstScHdr*>(nodep); }
inline AstScImp* AstNode::privateCastScImp(AstNode* nodep) { return dynamic_cast<AstScImp*>(nodep); }
inline AstScImpHdr* AstNode::privateCastScImpHdr(AstNode* nodep) { return dynamic_cast<AstScImpHdr*>(nodep); }
inline AstScInt* AstNode::privateCastScInt(AstNode* nodep) { return dynamic_cast<AstScInt*>(nodep); }
inline AstScope* AstNode::privateCastScope(AstNode* nodep) { return dynamic_cast<AstScope*>(nodep); }
inline AstScopeName* AstNode::privateCastScopeName(AstNode* nodep) { return dynamic_cast<AstScopeName*>(nodep); }
inline AstSel* AstNode::privateCastSel(AstNode* nodep) { return dynamic_cast<AstSel*>(nodep); }
inline AstSelBit* AstNode::privateCastSelBit(AstNode* nodep) { return dynamic_cast<AstSelBit*>(nodep); }
inline AstSelExtract* AstNode::privateCastSelExtract(AstNode* nodep) { return dynamic_cast<AstSelExtract*>(nodep); }
inline AstSelMinus* AstNode::privateCastSelMinus(AstNode* nodep) { return dynamic_cast<AstSelMinus*>(nodep); }
inline AstSelPlus* AstNode::privateCastSelPlus(AstNode* nodep) { return dynamic_cast<AstSelPlus*>(nodep); }
inline AstSenGate* AstNode::privateCastSenGate(AstNode* nodep) { return dynamic_cast<AstSenGate*>(nodep); }
inline AstSenItem* AstNode::privateCastSenItem(AstNode* nodep) { return dynamic_cast<AstSenItem*>(nodep); }
inline AstSenTree* AstNode::privateCastSenTree(AstNode* nodep) { return dynamic_cast<AstSenTree*>(nodep); }
inline AstShiftL* AstNode::privateCastShiftL(AstNode* nodep) { return dynamic_cast<AstShiftL*>(nodep); }
inline AstShiftR* AstNode::privateCastShiftR(AstNode* nodep) { return dynamic_cast<AstShiftR*>(nodep); }
inline AstShiftRS* AstNode::privateCastShiftRS(AstNode* nodep) { return dynamic_cast<AstShiftRS*>(nodep); }
inline AstSigned* AstNode::privateCastSigned(AstNode* nodep) { return dynamic_cast<AstSigned*>(nodep); }
inline AstSinD* AstNode::privateCastSinD(AstNode* nodep) { return dynamic_cast<AstSinD*>(nodep); }
inline AstSinhD* AstNode::privateCastSinhD(AstNode* nodep) { return dynamic_cast<AstSinhD*>(nodep); }
inline AstSliceSel* AstNode::privateCastSliceSel(AstNode* nodep) { return dynamic_cast<AstSliceSel*>(nodep); }
inline AstSplitPlaceholder* AstNode::privateCastSplitPlaceholder(AstNode* nodep) { return dynamic_cast<AstSplitPlaceholder*>(nodep); }
inline AstSqrtD* AstNode::privateCastSqrtD(AstNode* nodep) { return dynamic_cast<AstSqrtD*>(nodep); }
inline AstStop* AstNode::privateCastStop(AstNode* nodep) { return dynamic_cast<AstStop*>(nodep); }
inline AstStreamL* AstNode::privateCastStreamL(AstNode* nodep) { return dynamic_cast<AstStreamL*>(nodep); }
inline AstStreamR* AstNode::privateCastStreamR(AstNode* nodep) { return dynamic_cast<AstStreamR*>(nodep); }
inline AstStructDType* AstNode::privateCastStructDType(AstNode* nodep) { return dynamic_cast<AstStructDType*>(nodep); }
inline AstSub* AstNode::privateCastSub(AstNode* nodep) { return dynamic_cast<AstSub*>(nodep); }
inline AstSubD* AstNode::privateCastSubD(AstNode* nodep) { return dynamic_cast<AstSubD*>(nodep); }
inline AstSysFuncAsTask* AstNode::privateCastSysFuncAsTask(AstNode* nodep) { return dynamic_cast<AstSysFuncAsTask*>(nodep); }
inline AstSysIgnore* AstNode::privateCastSysIgnore(AstNode* nodep) { return dynamic_cast<AstSysIgnore*>(nodep); }
inline AstSystemF* AstNode::privateCastSystemF(AstNode* nodep) { return dynamic_cast<AstSystemF*>(nodep); }
inline AstSystemT* AstNode::privateCastSystemT(AstNode* nodep) { return dynamic_cast<AstSystemT*>(nodep); }
inline AstTanD* AstNode::privateCastTanD(AstNode* nodep) { return dynamic_cast<AstTanD*>(nodep); }
inline AstTanhD* AstNode::privateCastTanhD(AstNode* nodep) { return dynamic_cast<AstTanhD*>(nodep); }
inline AstTask* AstNode::privateCastTask(AstNode* nodep) { return dynamic_cast<AstTask*>(nodep); }
inline AstTaskRef* AstNode::privateCastTaskRef(AstNode* nodep) { return dynamic_cast<AstTaskRef*>(nodep); }
inline AstTestPlusArgs* AstNode::privateCastTestPlusArgs(AstNode* nodep) { return dynamic_cast<AstTestPlusArgs*>(nodep); }
inline AstText* AstNode::privateCastText(AstNode* nodep) { return dynamic_cast<AstText*>(nodep); }
inline AstTime* AstNode::privateCastTime(AstNode* nodep) { return dynamic_cast<AstTime*>(nodep); }
inline AstTimeD* AstNode::privateCastTimeD(AstNode* nodep) { return dynamic_cast<AstTimeD*>(nodep); }
inline AstTopScope* AstNode::privateCastTopScope(AstNode* nodep) { return dynamic_cast<AstTopScope*>(nodep); }
inline AstTraceDecl* AstNode::privateCastTraceDecl(AstNode* nodep) { return dynamic_cast<AstTraceDecl*>(nodep); }
inline AstTraceInc* AstNode::privateCastTraceInc(AstNode* nodep) { return dynamic_cast<AstTraceInc*>(nodep); }
inline AstTypeTable* AstNode::privateCastTypeTable(AstNode* nodep) { return dynamic_cast<AstTypeTable*>(nodep); }
inline AstTypedef* AstNode::privateCastTypedef(AstNode* nodep) { return dynamic_cast<AstTypedef*>(nodep); }
inline AstTypedefFwd* AstNode::privateCastTypedefFwd(AstNode* nodep) { return dynamic_cast<AstTypedefFwd*>(nodep); }
inline AstUCFunc* AstNode::privateCastUCFunc(AstNode* nodep) { return dynamic_cast<AstUCFunc*>(nodep); }
inline AstUCStmt* AstNode::privateCastUCStmt(AstNode* nodep) { return dynamic_cast<AstUCStmt*>(nodep); }
inline AstUdpTable* AstNode::privateCastUdpTable(AstNode* nodep) { return dynamic_cast<AstUdpTable*>(nodep); }
inline AstUdpTableLine* AstNode::privateCastUdpTableLine(AstNode* nodep) { return dynamic_cast<AstUdpTableLine*>(nodep); }
inline AstUnionDType* AstNode::privateCastUnionDType(AstNode* nodep) { return dynamic_cast<AstUnionDType*>(nodep); }
inline AstUnlinkedRef* AstNode::privateCastUnlinkedRef(AstNode* nodep) { return dynamic_cast<AstUnlinkedRef*>(nodep); }
inline AstUnpackArrayDType* AstNode::privateCastUnpackArrayDType(AstNode* nodep) { return dynamic_cast<AstUnpackArrayDType*>(nodep); }
inline AstUnsigned* AstNode::privateCastUnsigned(AstNode* nodep) { return dynamic_cast<AstUnsigned*>(nodep); }
inline AstUnsizedArrayDType* AstNode::privateCastUnsizedArrayDType(AstNode* nodep) { return dynamic_cast<AstUnsizedArrayDType*>(nodep); }
inline AstUnsizedRange* AstNode::privateCastUnsizedRange(AstNode* nodep) { return dynamic_cast<AstUnsizedRange*>(nodep); }
inline AstUntilStable* AstNode::privateCastUntilStable(AstNode* nodep) { return dynamic_cast<AstUntilStable*>(nodep); }
inline AstVAssert* AstNode::privateCastVAssert(AstNode* nodep) { return dynamic_cast<AstVAssert*>(nodep); }
inline AstValuePlusArgs* AstNode::privateCastValuePlusArgs(AstNode* nodep) { return dynamic_cast<AstValuePlusArgs*>(nodep); }
inline AstVar* AstNode::privateCastVar(AstNode* nodep) { return dynamic_cast<AstVar*>(nodep); }
inline AstVarRef* AstNode::privateCastVarRef(AstNode* nodep) { return dynamic_cast<AstVarRef*>(nodep); }
inline AstVarScope* AstNode::privateCastVarScope(AstNode* nodep) { return dynamic_cast<AstVarScope*>(nodep); }
inline AstVarXRef* AstNode::privateCastVarXRef(AstNode* nodep) { return dynamic_cast<AstVarXRef*>(nodep); }
inline AstWhile* AstNode::privateCastWhile(AstNode* nodep) { return dynamic_cast<AstWhile*>(nodep); }
inline AstWordSel* AstNode::privateCastWordSel(AstNode* nodep) { return dynamic_cast<AstWordSel*>(nodep); }
inline AstWriteMem* AstNode::privateCastWriteMem(AstNode* nodep) { return dynamic_cast<AstWriteMem*>(nodep); }
inline AstXnor* AstNode::privateCastXnor(AstNode* nodep) { return dynamic_cast<AstXnor*>(nodep); }
inline AstXor* AstNode::privateCastXor(AstNode* nodep) { return dynamic_cast<AstXor*>(nodep); }
inline const AstAcosD* AstNode::privateConstCastAcosD(const AstNode* nodep) { return dynamic_cast<const AstAcosD*>(nodep); }
inline const AstAcoshD* AstNode::privateConstCastAcoshD(const AstNode* nodep) { return dynamic_cast<const AstAcoshD*>(nodep); }
inline const AstActive* AstNode::privateConstCastActive(const AstNode* nodep) { return dynamic_cast<const AstActive*>(nodep); }
inline const AstAdd* AstNode::privateConstCastAdd(const AstNode* nodep) { return dynamic_cast<const AstAdd*>(nodep); }
inline const AstAddD* AstNode::privateConstCastAddD(const AstNode* nodep) { return dynamic_cast<const AstAddD*>(nodep); }
inline const AstAlways* AstNode::privateConstCastAlways(const AstNode* nodep) { return dynamic_cast<const AstAlways*>(nodep); }
inline const AstAlwaysPost* AstNode::privateConstCastAlwaysPost(const AstNode* nodep) { return dynamic_cast<const AstAlwaysPost*>(nodep); }
inline const AstAlwaysPublic* AstNode::privateConstCastAlwaysPublic(const AstNode* nodep) { return dynamic_cast<const AstAlwaysPublic*>(nodep); }
inline const AstAnd* AstNode::privateConstCastAnd(const AstNode* nodep) { return dynamic_cast<const AstAnd*>(nodep); }
inline const AstArg* AstNode::privateConstCastArg(const AstNode* nodep) { return dynamic_cast<const AstArg*>(nodep); }
inline const AstArraySel* AstNode::privateConstCastArraySel(const AstNode* nodep) { return dynamic_cast<const AstArraySel*>(nodep); }
inline const AstAsinD* AstNode::privateConstCastAsinD(const AstNode* nodep) { return dynamic_cast<const AstAsinD*>(nodep); }
inline const AstAsinhD* AstNode::privateConstCastAsinhD(const AstNode* nodep) { return dynamic_cast<const AstAsinhD*>(nodep); }
inline const AstAssign* AstNode::privateConstCastAssign(const AstNode* nodep) { return dynamic_cast<const AstAssign*>(nodep); }
inline const AstAssignAlias* AstNode::privateConstCastAssignAlias(const AstNode* nodep) { return dynamic_cast<const AstAssignAlias*>(nodep); }
inline const AstAssignDly* AstNode::privateConstCastAssignDly(const AstNode* nodep) { return dynamic_cast<const AstAssignDly*>(nodep); }
inline const AstAssignPost* AstNode::privateConstCastAssignPost(const AstNode* nodep) { return dynamic_cast<const AstAssignPost*>(nodep); }
inline const AstAssignPre* AstNode::privateConstCastAssignPre(const AstNode* nodep) { return dynamic_cast<const AstAssignPre*>(nodep); }
inline const AstAssignVarScope* AstNode::privateConstCastAssignVarScope(const AstNode* nodep) { return dynamic_cast<const AstAssignVarScope*>(nodep); }
inline const AstAssignW* AstNode::privateConstCastAssignW(const AstNode* nodep) { return dynamic_cast<const AstAssignW*>(nodep); }
inline const AstAtan2D* AstNode::privateConstCastAtan2D(const AstNode* nodep) { return dynamic_cast<const AstAtan2D*>(nodep); }
inline const AstAtanD* AstNode::privateConstCastAtanD(const AstNode* nodep) { return dynamic_cast<const AstAtanD*>(nodep); }
inline const AstAtanhD* AstNode::privateConstCastAtanhD(const AstNode* nodep) { return dynamic_cast<const AstAtanhD*>(nodep); }
inline const AstAttrOf* AstNode::privateConstCastAttrOf(const AstNode* nodep) { return dynamic_cast<const AstAttrOf*>(nodep); }
inline const AstBasicDType* AstNode::privateConstCastBasicDType(const AstNode* nodep) { return dynamic_cast<const AstBasicDType*>(nodep); }
inline const AstBegin* AstNode::privateConstCastBegin(const AstNode* nodep) { return dynamic_cast<const AstBegin*>(nodep); }
inline const AstBind* AstNode::privateConstCastBind(const AstNode* nodep) { return dynamic_cast<const AstBind*>(nodep); }
inline const AstBitsToRealD* AstNode::privateConstCastBitsToRealD(const AstNode* nodep) { return dynamic_cast<const AstBitsToRealD*>(nodep); }
inline const AstBreak* AstNode::privateConstCastBreak(const AstNode* nodep) { return dynamic_cast<const AstBreak*>(nodep); }
inline const AstBufIf1* AstNode::privateConstCastBufIf1(const AstNode* nodep) { return dynamic_cast<const AstBufIf1*>(nodep); }
inline const AstCCall* AstNode::privateConstCastCCall(const AstNode* nodep) { return dynamic_cast<const AstCCall*>(nodep); }
inline const AstCCast* AstNode::privateConstCastCCast(const AstNode* nodep) { return dynamic_cast<const AstCCast*>(nodep); }
inline const AstCFile* AstNode::privateConstCastCFile(const AstNode* nodep) { return dynamic_cast<const AstCFile*>(nodep); }
inline const AstCFunc* AstNode::privateConstCastCFunc(const AstNode* nodep) { return dynamic_cast<const AstCFunc*>(nodep); }
inline const AstCLog2* AstNode::privateConstCastCLog2(const AstNode* nodep) { return dynamic_cast<const AstCLog2*>(nodep); }
inline const AstCMath* AstNode::privateConstCastCMath(const AstNode* nodep) { return dynamic_cast<const AstCMath*>(nodep); }
inline const AstCReset* AstNode::privateConstCastCReset(const AstNode* nodep) { return dynamic_cast<const AstCReset*>(nodep); }
inline const AstCReturn* AstNode::privateConstCastCReturn(const AstNode* nodep) { return dynamic_cast<const AstCReturn*>(nodep); }
inline const AstCStmt* AstNode::privateConstCastCStmt(const AstNode* nodep) { return dynamic_cast<const AstCStmt*>(nodep); }
inline const AstCase* AstNode::privateConstCastCase(const AstNode* nodep) { return dynamic_cast<const AstCase*>(nodep); }
inline const AstCaseItem* AstNode::privateConstCastCaseItem(const AstNode* nodep) { return dynamic_cast<const AstCaseItem*>(nodep); }
inline const AstCast* AstNode::privateConstCastCast(const AstNode* nodep) { return dynamic_cast<const AstCast*>(nodep); }
inline const AstCastParse* AstNode::privateConstCastCastParse(const AstNode* nodep) { return dynamic_cast<const AstCastParse*>(nodep); }
inline const AstCastSize* AstNode::privateConstCastCastSize(const AstNode* nodep) { return dynamic_cast<const AstCastSize*>(nodep); }
inline const AstCeilD* AstNode::privateConstCastCeilD(const AstNode* nodep) { return dynamic_cast<const AstCeilD*>(nodep); }
inline const AstCell* AstNode::privateConstCastCell(const AstNode* nodep) { return dynamic_cast<const AstCell*>(nodep); }
inline const AstCellArrayRef* AstNode::privateConstCastCellArrayRef(const AstNode* nodep) { return dynamic_cast<const AstCellArrayRef*>(nodep); }
inline const AstCellInline* AstNode::privateConstCastCellInline(const AstNode* nodep) { return dynamic_cast<const AstCellInline*>(nodep); }
inline const AstCellRef* AstNode::privateConstCastCellRef(const AstNode* nodep) { return dynamic_cast<const AstCellRef*>(nodep); }
inline const AstChangeDet* AstNode::privateConstCastChangeDet(const AstNode* nodep) { return dynamic_cast<const AstChangeDet*>(nodep); }
inline const AstChangeXor* AstNode::privateConstCastChangeXor(const AstNode* nodep) { return dynamic_cast<const AstChangeXor*>(nodep); }
inline const AstClocking* AstNode::privateConstCastClocking(const AstNode* nodep) { return dynamic_cast<const AstClocking*>(nodep); }
inline const AstComment* AstNode::privateConstCastComment(const AstNode* nodep) { return dynamic_cast<const AstComment*>(nodep); }
inline const AstConcat* AstNode::privateConstCastConcat(const AstNode* nodep) { return dynamic_cast<const AstConcat*>(nodep); }
inline const AstConcatN* AstNode::privateConstCastConcatN(const AstNode* nodep) { return dynamic_cast<const AstConcatN*>(nodep); }
inline const AstCond* AstNode::privateConstCastCond(const AstNode* nodep) { return dynamic_cast<const AstCond*>(nodep); }
inline const AstCondBound* AstNode::privateConstCastCondBound(const AstNode* nodep) { return dynamic_cast<const AstCondBound*>(nodep); }
inline const AstConst* AstNode::privateConstCastConst(const AstNode* nodep) { return dynamic_cast<const AstConst*>(nodep); }
inline const AstConstDType* AstNode::privateConstCastConstDType(const AstNode* nodep) { return dynamic_cast<const AstConstDType*>(nodep); }
inline const AstContinue* AstNode::privateConstCastContinue(const AstNode* nodep) { return dynamic_cast<const AstContinue*>(nodep); }
inline const AstCosD* AstNode::privateConstCastCosD(const AstNode* nodep) { return dynamic_cast<const AstCosD*>(nodep); }
inline const AstCoshD* AstNode::privateConstCastCoshD(const AstNode* nodep) { return dynamic_cast<const AstCoshD*>(nodep); }
inline const AstCountOnes* AstNode::privateConstCastCountOnes(const AstNode* nodep) { return dynamic_cast<const AstCountOnes*>(nodep); }
inline const AstCoverDecl* AstNode::privateConstCastCoverDecl(const AstNode* nodep) { return dynamic_cast<const AstCoverDecl*>(nodep); }
inline const AstCoverInc* AstNode::privateConstCastCoverInc(const AstNode* nodep) { return dynamic_cast<const AstCoverInc*>(nodep); }
inline const AstCoverToggle* AstNode::privateConstCastCoverToggle(const AstNode* nodep) { return dynamic_cast<const AstCoverToggle*>(nodep); }
inline const AstCvtPackString* AstNode::privateConstCastCvtPackString(const AstNode* nodep) { return dynamic_cast<const AstCvtPackString*>(nodep); }
inline const AstDefImplicitDType* AstNode::privateConstCastDefImplicitDType(const AstNode* nodep) { return dynamic_cast<const AstDefImplicitDType*>(nodep); }
inline const AstDefParam* AstNode::privateConstCastDefParam(const AstNode* nodep) { return dynamic_cast<const AstDefParam*>(nodep); }
inline const AstDisable* AstNode::privateConstCastDisable(const AstNode* nodep) { return dynamic_cast<const AstDisable*>(nodep); }
inline const AstDisplay* AstNode::privateConstCastDisplay(const AstNode* nodep) { return dynamic_cast<const AstDisplay*>(nodep); }
inline const AstDiv* AstNode::privateConstCastDiv(const AstNode* nodep) { return dynamic_cast<const AstDiv*>(nodep); }
inline const AstDivD* AstNode::privateConstCastDivD(const AstNode* nodep) { return dynamic_cast<const AstDivD*>(nodep); }
inline const AstDivS* AstNode::privateConstCastDivS(const AstNode* nodep) { return dynamic_cast<const AstDivS*>(nodep); }
inline const AstDot* AstNode::privateConstCastDot(const AstNode* nodep) { return dynamic_cast<const AstDot*>(nodep); }
inline const AstDpiExport* AstNode::privateConstCastDpiExport(const AstNode* nodep) { return dynamic_cast<const AstDpiExport*>(nodep); }
inline const AstEnumDType* AstNode::privateConstCastEnumDType(const AstNode* nodep) { return dynamic_cast<const AstEnumDType*>(nodep); }
inline const AstEnumItem* AstNode::privateConstCastEnumItem(const AstNode* nodep) { return dynamic_cast<const AstEnumItem*>(nodep); }
inline const AstEnumItemRef* AstNode::privateConstCastEnumItemRef(const AstNode* nodep) { return dynamic_cast<const AstEnumItemRef*>(nodep); }
inline const AstEq* AstNode::privateConstCastEq(const AstNode* nodep) { return dynamic_cast<const AstEq*>(nodep); }
inline const AstEqCase* AstNode::privateConstCastEqCase(const AstNode* nodep) { return dynamic_cast<const AstEqCase*>(nodep); }
inline const AstEqD* AstNode::privateConstCastEqD(const AstNode* nodep) { return dynamic_cast<const AstEqD*>(nodep); }
inline const AstEqN* AstNode::privateConstCastEqN(const AstNode* nodep) { return dynamic_cast<const AstEqN*>(nodep); }
inline const AstEqWild* AstNode::privateConstCastEqWild(const AstNode* nodep) { return dynamic_cast<const AstEqWild*>(nodep); }
inline const AstExecGraph* AstNode::privateConstCastExecGraph(const AstNode* nodep) { return dynamic_cast<const AstExecGraph*>(nodep); }
inline const AstExpD* AstNode::privateConstCastExpD(const AstNode* nodep) { return dynamic_cast<const AstExpD*>(nodep); }
inline const AstExtend* AstNode::privateConstCastExtend(const AstNode* nodep) { return dynamic_cast<const AstExtend*>(nodep); }
inline const AstExtendS* AstNode::privateConstCastExtendS(const AstNode* nodep) { return dynamic_cast<const AstExtendS*>(nodep); }
inline const AstFClose* AstNode::privateConstCastFClose(const AstNode* nodep) { return dynamic_cast<const AstFClose*>(nodep); }
inline const AstFEof* AstNode::privateConstCastFEof(const AstNode* nodep) { return dynamic_cast<const AstFEof*>(nodep); }
inline const AstFFlush* AstNode::privateConstCastFFlush(const AstNode* nodep) { return dynamic_cast<const AstFFlush*>(nodep); }
inline const AstFGetC* AstNode::privateConstCastFGetC(const AstNode* nodep) { return dynamic_cast<const AstFGetC*>(nodep); }
inline const AstFGetS* AstNode::privateConstCastFGetS(const AstNode* nodep) { return dynamic_cast<const AstFGetS*>(nodep); }
inline const AstFOpen* AstNode::privateConstCastFOpen(const AstNode* nodep) { return dynamic_cast<const AstFOpen*>(nodep); }
inline const AstFRead* AstNode::privateConstCastFRead(const AstNode* nodep) { return dynamic_cast<const AstFRead*>(nodep); }
inline const AstFScanF* AstNode::privateConstCastFScanF(const AstNode* nodep) { return dynamic_cast<const AstFScanF*>(nodep); }
inline const AstFinal* AstNode::privateConstCastFinal(const AstNode* nodep) { return dynamic_cast<const AstFinal*>(nodep); }
inline const AstFinish* AstNode::privateConstCastFinish(const AstNode* nodep) { return dynamic_cast<const AstFinish*>(nodep); }
inline const AstFloorD* AstNode::privateConstCastFloorD(const AstNode* nodep) { return dynamic_cast<const AstFloorD*>(nodep); }
inline const AstForeach* AstNode::privateConstCastForeach(const AstNode* nodep) { return dynamic_cast<const AstForeach*>(nodep); }
inline const AstFunc* AstNode::privateConstCastFunc(const AstNode* nodep) { return dynamic_cast<const AstFunc*>(nodep); }
inline const AstFuncRef* AstNode::privateConstCastFuncRef(const AstNode* nodep) { return dynamic_cast<const AstFuncRef*>(nodep); }
inline const AstGatePin* AstNode::privateConstCastGatePin(const AstNode* nodep) { return dynamic_cast<const AstGatePin*>(nodep); }
inline const AstGenCase* AstNode::privateConstCastGenCase(const AstNode* nodep) { return dynamic_cast<const AstGenCase*>(nodep); }
inline const AstGenFor* AstNode::privateConstCastGenFor(const AstNode* nodep) { return dynamic_cast<const AstGenFor*>(nodep); }
inline const AstGenIf* AstNode::privateConstCastGenIf(const AstNode* nodep) { return dynamic_cast<const AstGenIf*>(nodep); }
inline const AstGenerate* AstNode::privateConstCastGenerate(const AstNode* nodep) { return dynamic_cast<const AstGenerate*>(nodep); }
inline const AstGt* AstNode::privateConstCastGt(const AstNode* nodep) { return dynamic_cast<const AstGt*>(nodep); }
inline const AstGtD* AstNode::privateConstCastGtD(const AstNode* nodep) { return dynamic_cast<const AstGtD*>(nodep); }
inline const AstGtN* AstNode::privateConstCastGtN(const AstNode* nodep) { return dynamic_cast<const AstGtN*>(nodep); }
inline const AstGtS* AstNode::privateConstCastGtS(const AstNode* nodep) { return dynamic_cast<const AstGtS*>(nodep); }
inline const AstGte* AstNode::privateConstCastGte(const AstNode* nodep) { return dynamic_cast<const AstGte*>(nodep); }
inline const AstGteD* AstNode::privateConstCastGteD(const AstNode* nodep) { return dynamic_cast<const AstGteD*>(nodep); }
inline const AstGteN* AstNode::privateConstCastGteN(const AstNode* nodep) { return dynamic_cast<const AstGteN*>(nodep); }
inline const AstGteS* AstNode::privateConstCastGteS(const AstNode* nodep) { return dynamic_cast<const AstGteS*>(nodep); }
inline const AstHypotD* AstNode::privateConstCastHypotD(const AstNode* nodep) { return dynamic_cast<const AstHypotD*>(nodep); }
inline const AstIToRD* AstNode::privateConstCastIToRD(const AstNode* nodep) { return dynamic_cast<const AstIToRD*>(nodep); }
inline const AstIf* AstNode::privateConstCastIf(const AstNode* nodep) { return dynamic_cast<const AstIf*>(nodep); }
inline const AstIface* AstNode::privateConstCastIface(const AstNode* nodep) { return dynamic_cast<const AstIface*>(nodep); }
inline const AstIfaceRefDType* AstNode::privateConstCastIfaceRefDType(const AstNode* nodep) { return dynamic_cast<const AstIfaceRefDType*>(nodep); }
inline const AstImplicit* AstNode::privateConstCastImplicit(const AstNode* nodep) { return dynamic_cast<const AstImplicit*>(nodep); }
inline const AstInitArray* AstNode::privateConstCastInitArray(const AstNode* nodep) { return dynamic_cast<const AstInitArray*>(nodep); }
inline const AstInitial* AstNode::privateConstCastInitial(const AstNode* nodep) { return dynamic_cast<const AstInitial*>(nodep); }
inline const AstInside* AstNode::privateConstCastInside(const AstNode* nodep) { return dynamic_cast<const AstInside*>(nodep); }
inline const AstInsideRange* AstNode::privateConstCastInsideRange(const AstNode* nodep) { return dynamic_cast<const AstInsideRange*>(nodep); }
inline const AstIsUnknown* AstNode::privateConstCastIsUnknown(const AstNode* nodep) { return dynamic_cast<const AstIsUnknown*>(nodep); }
inline const AstJumpGo* AstNode::privateConstCastJumpGo(const AstNode* nodep) { return dynamic_cast<const AstJumpGo*>(nodep); }
inline const AstJumpLabel* AstNode::privateConstCastJumpLabel(const AstNode* nodep) { return dynamic_cast<const AstJumpLabel*>(nodep); }
inline const AstLenN* AstNode::privateConstCastLenN(const AstNode* nodep) { return dynamic_cast<const AstLenN*>(nodep); }
inline const AstLog10D* AstNode::privateConstCastLog10D(const AstNode* nodep) { return dynamic_cast<const AstLog10D*>(nodep); }
inline const AstLogAnd* AstNode::privateConstCastLogAnd(const AstNode* nodep) { return dynamic_cast<const AstLogAnd*>(nodep); }
inline const AstLogD* AstNode::privateConstCastLogD(const AstNode* nodep) { return dynamic_cast<const AstLogD*>(nodep); }
inline const AstLogIf* AstNode::privateConstCastLogIf(const AstNode* nodep) { return dynamic_cast<const AstLogIf*>(nodep); }
inline const AstLogIff* AstNode::privateConstCastLogIff(const AstNode* nodep) { return dynamic_cast<const AstLogIff*>(nodep); }
inline const AstLogNot* AstNode::privateConstCastLogNot(const AstNode* nodep) { return dynamic_cast<const AstLogNot*>(nodep); }
inline const AstLogOr* AstNode::privateConstCastLogOr(const AstNode* nodep) { return dynamic_cast<const AstLogOr*>(nodep); }
inline const AstLt* AstNode::privateConstCastLt(const AstNode* nodep) { return dynamic_cast<const AstLt*>(nodep); }
inline const AstLtD* AstNode::privateConstCastLtD(const AstNode* nodep) { return dynamic_cast<const AstLtD*>(nodep); }
inline const AstLtN* AstNode::privateConstCastLtN(const AstNode* nodep) { return dynamic_cast<const AstLtN*>(nodep); }
inline const AstLtS* AstNode::privateConstCastLtS(const AstNode* nodep) { return dynamic_cast<const AstLtS*>(nodep); }
inline const AstLte* AstNode::privateConstCastLte(const AstNode* nodep) { return dynamic_cast<const AstLte*>(nodep); }
inline const AstLteD* AstNode::privateConstCastLteD(const AstNode* nodep) { return dynamic_cast<const AstLteD*>(nodep); }
inline const AstLteN* AstNode::privateConstCastLteN(const AstNode* nodep) { return dynamic_cast<const AstLteN*>(nodep); }
inline const AstLteS* AstNode::privateConstCastLteS(const AstNode* nodep) { return dynamic_cast<const AstLteS*>(nodep); }
inline const AstMTaskBody* AstNode::privateConstCastMTaskBody(const AstNode* nodep) { return dynamic_cast<const AstMTaskBody*>(nodep); }
inline const AstMemberDType* AstNode::privateConstCastMemberDType(const AstNode* nodep) { return dynamic_cast<const AstMemberDType*>(nodep); }
inline const AstMemberSel* AstNode::privateConstCastMemberSel(const AstNode* nodep) { return dynamic_cast<const AstMemberSel*>(nodep); }
inline const AstMethodSel* AstNode::privateConstCastMethodSel(const AstNode* nodep) { return dynamic_cast<const AstMethodSel*>(nodep); }
inline const AstModDiv* AstNode::privateConstCastModDiv(const AstNode* nodep) { return dynamic_cast<const AstModDiv*>(nodep); }
inline const AstModDivS* AstNode::privateConstCastModDivS(const AstNode* nodep) { return dynamic_cast<const AstModDivS*>(nodep); }
inline const AstModport* AstNode::privateConstCastModport(const AstNode* nodep) { return dynamic_cast<const AstModport*>(nodep); }
inline const AstModportFTaskRef* AstNode::privateConstCastModportFTaskRef(const AstNode* nodep) { return dynamic_cast<const AstModportFTaskRef*>(nodep); }
inline const AstModportVarRef* AstNode::privateConstCastModportVarRef(const AstNode* nodep) { return dynamic_cast<const AstModportVarRef*>(nodep); }
inline const AstModule* AstNode::privateConstCastModule(const AstNode* nodep) { return dynamic_cast<const AstModule*>(nodep); }
inline const AstMul* AstNode::privateConstCastMul(const AstNode* nodep) { return dynamic_cast<const AstMul*>(nodep); }
inline const AstMulD* AstNode::privateConstCastMulD(const AstNode* nodep) { return dynamic_cast<const AstMulD*>(nodep); }
inline const AstMulS* AstNode::privateConstCastMulS(const AstNode* nodep) { return dynamic_cast<const AstMulS*>(nodep); }
inline const AstNegate* AstNode::privateConstCastNegate(const AstNode* nodep) { return dynamic_cast<const AstNegate*>(nodep); }
inline const AstNegateD* AstNode::privateConstCastNegateD(const AstNode* nodep) { return dynamic_cast<const AstNegateD*>(nodep); }
inline const AstNeq* AstNode::privateConstCastNeq(const AstNode* nodep) { return dynamic_cast<const AstNeq*>(nodep); }
inline const AstNeqCase* AstNode::privateConstCastNeqCase(const AstNode* nodep) { return dynamic_cast<const AstNeqCase*>(nodep); }
inline const AstNeqD* AstNode::privateConstCastNeqD(const AstNode* nodep) { return dynamic_cast<const AstNeqD*>(nodep); }
inline const AstNeqN* AstNode::privateConstCastNeqN(const AstNode* nodep) { return dynamic_cast<const AstNeqN*>(nodep); }
inline const AstNeqWild* AstNode::privateConstCastNeqWild(const AstNode* nodep) { return dynamic_cast<const AstNeqWild*>(nodep); }
inline const AstNetlist* AstNode::privateConstCastNetlist(const AstNode* nodep) { return dynamic_cast<const AstNetlist*>(nodep); }
inline const AstNode* AstNode::privateConstCastNode(const AstNode* nodep) { return dynamic_cast<const AstNode*>(nodep); }
inline const AstNodeArrayDType* AstNode::privateConstCastNodeArrayDType(const AstNode* nodep) { return dynamic_cast<const AstNodeArrayDType*>(nodep); }
inline const AstNodeAssign* AstNode::privateConstCastNodeAssign(const AstNode* nodep) { return dynamic_cast<const AstNodeAssign*>(nodep); }
inline const AstNodeBiCom* AstNode::privateConstCastNodeBiCom(const AstNode* nodep) { return dynamic_cast<const AstNodeBiCom*>(nodep); }
inline const AstNodeBiComAsv* AstNode::privateConstCastNodeBiComAsv(const AstNode* nodep) { return dynamic_cast<const AstNodeBiComAsv*>(nodep); }
inline const AstNodeBiop* AstNode::privateConstCastNodeBiop(const AstNode* nodep) { return dynamic_cast<const AstNodeBiop*>(nodep); }
inline const AstNodeCase* AstNode::privateConstCastNodeCase(const AstNode* nodep) { return dynamic_cast<const AstNodeCase*>(nodep); }
inline const AstNodeClassDType* AstNode::privateConstCastNodeClassDType(const AstNode* nodep) { return dynamic_cast<const AstNodeClassDType*>(nodep); }
inline const AstNodeCond* AstNode::privateConstCastNodeCond(const AstNode* nodep) { return dynamic_cast<const AstNodeCond*>(nodep); }
inline const AstNodeDType* AstNode::privateConstCastNodeDType(const AstNode* nodep) { return dynamic_cast<const AstNodeDType*>(nodep); }
inline const AstNodeFTask* AstNode::privateConstCastNodeFTask(const AstNode* nodep) { return dynamic_cast<const AstNodeFTask*>(nodep); }
inline const AstNodeFTaskRef* AstNode::privateConstCastNodeFTaskRef(const AstNode* nodep) { return dynamic_cast<const AstNodeFTaskRef*>(nodep); }
inline const AstNodeFor* AstNode::privateConstCastNodeFor(const AstNode* nodep) { return dynamic_cast<const AstNodeFor*>(nodep); }
inline const AstNodeIf* AstNode::privateConstCastNodeIf(const AstNode* nodep) { return dynamic_cast<const AstNodeIf*>(nodep); }
inline const AstNodeMath* AstNode::privateConstCastNodeMath(const AstNode* nodep) { return dynamic_cast<const AstNodeMath*>(nodep); }
inline const AstNodeModule* AstNode::privateConstCastNodeModule(const AstNode* nodep) { return dynamic_cast<const AstNodeModule*>(nodep); }
inline const AstNodePreSel* AstNode::privateConstCastNodePreSel(const AstNode* nodep) { return dynamic_cast<const AstNodePreSel*>(nodep); }
inline const AstNodePslCoverOrAssert* AstNode::privateConstCastNodePslCoverOrAssert(const AstNode* nodep) { return dynamic_cast<const AstNodePslCoverOrAssert*>(nodep); }
inline const AstNodeRange* AstNode::privateConstCastNodeRange(const AstNode* nodep) { return dynamic_cast<const AstNodeRange*>(nodep); }
inline const AstNodeReadWriteMem* AstNode::privateConstCastNodeReadWriteMem(const AstNode* nodep) { return dynamic_cast<const AstNodeReadWriteMem*>(nodep); }
inline const AstNodeSel* AstNode::privateConstCastNodeSel(const AstNode* nodep) { return dynamic_cast<const AstNodeSel*>(nodep); }
inline const AstNodeSenItem* AstNode::privateConstCastNodeSenItem(const AstNode* nodep) { return dynamic_cast<const AstNodeSenItem*>(nodep); }
inline const AstNodeStmt* AstNode::privateConstCastNodeStmt(const AstNode* nodep) { return dynamic_cast<const AstNodeStmt*>(nodep); }
inline const AstNodeStream* AstNode::privateConstCastNodeStream(const AstNode* nodep) { return dynamic_cast<const AstNodeStream*>(nodep); }
inline const AstNodeSystemBiop* AstNode::privateConstCastNodeSystemBiop(const AstNode* nodep) { return dynamic_cast<const AstNodeSystemBiop*>(nodep); }
inline const AstNodeSystemUniop* AstNode::privateConstCastNodeSystemUniop(const AstNode* nodep) { return dynamic_cast<const AstNodeSystemUniop*>(nodep); }
inline const AstNodeTermop* AstNode::privateConstCastNodeTermop(const AstNode* nodep) { return dynamic_cast<const AstNodeTermop*>(nodep); }
inline const AstNodeText* AstNode::privateConstCastNodeText(const AstNode* nodep) { return dynamic_cast<const AstNodeText*>(nodep); }
inline const AstNodeTriop* AstNode::privateConstCastNodeTriop(const AstNode* nodep) { return dynamic_cast<const AstNodeTriop*>(nodep); }
inline const AstNodeUniop* AstNode::privateConstCastNodeUniop(const AstNode* nodep) { return dynamic_cast<const AstNodeUniop*>(nodep); }
inline const AstNodeVarRef* AstNode::privateConstCastNodeVarRef(const AstNode* nodep) { return dynamic_cast<const AstNodeVarRef*>(nodep); }
inline const AstNot* AstNode::privateConstCastNot(const AstNode* nodep) { return dynamic_cast<const AstNot*>(nodep); }
inline const AstNotFoundModule* AstNode::privateConstCastNotFoundModule(const AstNode* nodep) { return dynamic_cast<const AstNotFoundModule*>(nodep); }
inline const AstOneHot* AstNode::privateConstCastOneHot(const AstNode* nodep) { return dynamic_cast<const AstOneHot*>(nodep); }
inline const AstOneHot0* AstNode::privateConstCastOneHot0(const AstNode* nodep) { return dynamic_cast<const AstOneHot0*>(nodep); }
inline const AstOr* AstNode::privateConstCastOr(const AstNode* nodep) { return dynamic_cast<const AstOr*>(nodep); }
inline const AstPackArrayDType* AstNode::privateConstCastPackArrayDType(const AstNode* nodep) { return dynamic_cast<const AstPackArrayDType*>(nodep); }
inline const AstPackage* AstNode::privateConstCastPackage(const AstNode* nodep) { return dynamic_cast<const AstPackage*>(nodep); }
inline const AstPackageExport* AstNode::privateConstCastPackageExport(const AstNode* nodep) { return dynamic_cast<const AstPackageExport*>(nodep); }
inline const AstPackageExportStarStar* AstNode::privateConstCastPackageExportStarStar(const AstNode* nodep) { return dynamic_cast<const AstPackageExportStarStar*>(nodep); }
inline const AstPackageImport* AstNode::privateConstCastPackageImport(const AstNode* nodep) { return dynamic_cast<const AstPackageImport*>(nodep); }
inline const AstPackageRef* AstNode::privateConstCastPackageRef(const AstNode* nodep) { return dynamic_cast<const AstPackageRef*>(nodep); }
inline const AstParamTypeDType* AstNode::privateConstCastParamTypeDType(const AstNode* nodep) { return dynamic_cast<const AstParamTypeDType*>(nodep); }
inline const AstParseRef* AstNode::privateConstCastParseRef(const AstNode* nodep) { return dynamic_cast<const AstParseRef*>(nodep); }
inline const AstParseTypeDType* AstNode::privateConstCastParseTypeDType(const AstNode* nodep) { return dynamic_cast<const AstParseTypeDType*>(nodep); }
inline const AstPast* AstNode::privateConstCastPast(const AstNode* nodep) { return dynamic_cast<const AstPast*>(nodep); }
inline const AstPatMember* AstNode::privateConstCastPatMember(const AstNode* nodep) { return dynamic_cast<const AstPatMember*>(nodep); }
inline const AstPattern* AstNode::privateConstCastPattern(const AstNode* nodep) { return dynamic_cast<const AstPattern*>(nodep); }
inline const AstPin* AstNode::privateConstCastPin(const AstNode* nodep) { return dynamic_cast<const AstPin*>(nodep); }
inline const AstPort* AstNode::privateConstCastPort(const AstNode* nodep) { return dynamic_cast<const AstPort*>(nodep); }
inline const AstPow* AstNode::privateConstCastPow(const AstNode* nodep) { return dynamic_cast<const AstPow*>(nodep); }
inline const AstPowD* AstNode::privateConstCastPowD(const AstNode* nodep) { return dynamic_cast<const AstPowD*>(nodep); }
inline const AstPowSS* AstNode::privateConstCastPowSS(const AstNode* nodep) { return dynamic_cast<const AstPowSS*>(nodep); }
inline const AstPowSU* AstNode::privateConstCastPowSU(const AstNode* nodep) { return dynamic_cast<const AstPowSU*>(nodep); }
inline const AstPowUS* AstNode::privateConstCastPowUS(const AstNode* nodep) { return dynamic_cast<const AstPowUS*>(nodep); }
inline const AstPragma* AstNode::privateConstCastPragma(const AstNode* nodep) { return dynamic_cast<const AstPragma*>(nodep); }
inline const AstPrimitive* AstNode::privateConstCastPrimitive(const AstNode* nodep) { return dynamic_cast<const AstPrimitive*>(nodep); }
inline const AstPslAssert* AstNode::privateConstCastPslAssert(const AstNode* nodep) { return dynamic_cast<const AstPslAssert*>(nodep); }
inline const AstPslClocked* AstNode::privateConstCastPslClocked(const AstNode* nodep) { return dynamic_cast<const AstPslClocked*>(nodep); }
inline const AstPslCover* AstNode::privateConstCastPslCover(const AstNode* nodep) { return dynamic_cast<const AstPslCover*>(nodep); }
inline const AstPslRestrict* AstNode::privateConstCastPslRestrict(const AstNode* nodep) { return dynamic_cast<const AstPslRestrict*>(nodep); }
inline const AstPull* AstNode::privateConstCastPull(const AstNode* nodep) { return dynamic_cast<const AstPull*>(nodep); }
inline const AstRToIRoundS* AstNode::privateConstCastRToIRoundS(const AstNode* nodep) { return dynamic_cast<const AstRToIRoundS*>(nodep); }
inline const AstRToIS* AstNode::privateConstCastRToIS(const AstNode* nodep) { return dynamic_cast<const AstRToIS*>(nodep); }
inline const AstRand* AstNode::privateConstCastRand(const AstNode* nodep) { return dynamic_cast<const AstRand*>(nodep); }
inline const AstRange* AstNode::privateConstCastRange(const AstNode* nodep) { return dynamic_cast<const AstRange*>(nodep); }
inline const AstReadMem* AstNode::privateConstCastReadMem(const AstNode* nodep) { return dynamic_cast<const AstReadMem*>(nodep); }
inline const AstRealToBits* AstNode::privateConstCastRealToBits(const AstNode* nodep) { return dynamic_cast<const AstRealToBits*>(nodep); }
inline const AstRedAnd* AstNode::privateConstCastRedAnd(const AstNode* nodep) { return dynamic_cast<const AstRedAnd*>(nodep); }
inline const AstRedOr* AstNode::privateConstCastRedOr(const AstNode* nodep) { return dynamic_cast<const AstRedOr*>(nodep); }
inline const AstRedXnor* AstNode::privateConstCastRedXnor(const AstNode* nodep) { return dynamic_cast<const AstRedXnor*>(nodep); }
inline const AstRedXor* AstNode::privateConstCastRedXor(const AstNode* nodep) { return dynamic_cast<const AstRedXor*>(nodep); }
inline const AstRefDType* AstNode::privateConstCastRefDType(const AstNode* nodep) { return dynamic_cast<const AstRefDType*>(nodep); }
inline const AstRepeat* AstNode::privateConstCastRepeat(const AstNode* nodep) { return dynamic_cast<const AstRepeat*>(nodep); }
inline const AstReplicate* AstNode::privateConstCastReplicate(const AstNode* nodep) { return dynamic_cast<const AstReplicate*>(nodep); }
inline const AstReplicateN* AstNode::privateConstCastReplicateN(const AstNode* nodep) { return dynamic_cast<const AstReplicateN*>(nodep); }
inline const AstReturn* AstNode::privateConstCastReturn(const AstNode* nodep) { return dynamic_cast<const AstReturn*>(nodep); }
inline const AstSFormat* AstNode::privateConstCastSFormat(const AstNode* nodep) { return dynamic_cast<const AstSFormat*>(nodep); }
inline const AstSFormatF* AstNode::privateConstCastSFormatF(const AstNode* nodep) { return dynamic_cast<const AstSFormatF*>(nodep); }
inline const AstSScanF* AstNode::privateConstCastSScanF(const AstNode* nodep) { return dynamic_cast<const AstSScanF*>(nodep); }
inline const AstScCtor* AstNode::privateConstCastScCtor(const AstNode* nodep) { return dynamic_cast<const AstScCtor*>(nodep); }
inline const AstScDtor* AstNode::privateConstCastScDtor(const AstNode* nodep) { return dynamic_cast<const AstScDtor*>(nodep); }
inline const AstScHdr* AstNode::privateConstCastScHdr(const AstNode* nodep) { return dynamic_cast<const AstScHdr*>(nodep); }
inline const AstScImp* AstNode::privateConstCastScImp(const AstNode* nodep) { return dynamic_cast<const AstScImp*>(nodep); }
inline const AstScImpHdr* AstNode::privateConstCastScImpHdr(const AstNode* nodep) { return dynamic_cast<const AstScImpHdr*>(nodep); }
inline const AstScInt* AstNode::privateConstCastScInt(const AstNode* nodep) { return dynamic_cast<const AstScInt*>(nodep); }
inline const AstScope* AstNode::privateConstCastScope(const AstNode* nodep) { return dynamic_cast<const AstScope*>(nodep); }
inline const AstScopeName* AstNode::privateConstCastScopeName(const AstNode* nodep) { return dynamic_cast<const AstScopeName*>(nodep); }
inline const AstSel* AstNode::privateConstCastSel(const AstNode* nodep) { return dynamic_cast<const AstSel*>(nodep); }
inline const AstSelBit* AstNode::privateConstCastSelBit(const AstNode* nodep) { return dynamic_cast<const AstSelBit*>(nodep); }
inline const AstSelExtract* AstNode::privateConstCastSelExtract(const AstNode* nodep) { return dynamic_cast<const AstSelExtract*>(nodep); }
inline const AstSelMinus* AstNode::privateConstCastSelMinus(const AstNode* nodep) { return dynamic_cast<const AstSelMinus*>(nodep); }
inline const AstSelPlus* AstNode::privateConstCastSelPlus(const AstNode* nodep) { return dynamic_cast<const AstSelPlus*>(nodep); }
inline const AstSenGate* AstNode::privateConstCastSenGate(const AstNode* nodep) { return dynamic_cast<const AstSenGate*>(nodep); }
inline const AstSenItem* AstNode::privateConstCastSenItem(const AstNode* nodep) { return dynamic_cast<const AstSenItem*>(nodep); }
inline const AstSenTree* AstNode::privateConstCastSenTree(const AstNode* nodep) { return dynamic_cast<const AstSenTree*>(nodep); }
inline const AstShiftL* AstNode::privateConstCastShiftL(const AstNode* nodep) { return dynamic_cast<const AstShiftL*>(nodep); }
inline const AstShiftR* AstNode::privateConstCastShiftR(const AstNode* nodep) { return dynamic_cast<const AstShiftR*>(nodep); }
inline const AstShiftRS* AstNode::privateConstCastShiftRS(const AstNode* nodep) { return dynamic_cast<const AstShiftRS*>(nodep); }
inline const AstSigned* AstNode::privateConstCastSigned(const AstNode* nodep) { return dynamic_cast<const AstSigned*>(nodep); }
inline const AstSinD* AstNode::privateConstCastSinD(const AstNode* nodep) { return dynamic_cast<const AstSinD*>(nodep); }
inline const AstSinhD* AstNode::privateConstCastSinhD(const AstNode* nodep) { return dynamic_cast<const AstSinhD*>(nodep); }
inline const AstSliceSel* AstNode::privateConstCastSliceSel(const AstNode* nodep) { return dynamic_cast<const AstSliceSel*>(nodep); }
inline const AstSplitPlaceholder* AstNode::privateConstCastSplitPlaceholder(const AstNode* nodep) { return dynamic_cast<const AstSplitPlaceholder*>(nodep); }
inline const AstSqrtD* AstNode::privateConstCastSqrtD(const AstNode* nodep) { return dynamic_cast<const AstSqrtD*>(nodep); }
inline const AstStop* AstNode::privateConstCastStop(const AstNode* nodep) { return dynamic_cast<const AstStop*>(nodep); }
inline const AstStreamL* AstNode::privateConstCastStreamL(const AstNode* nodep) { return dynamic_cast<const AstStreamL*>(nodep); }
inline const AstStreamR* AstNode::privateConstCastStreamR(const AstNode* nodep) { return dynamic_cast<const AstStreamR*>(nodep); }
inline const AstStructDType* AstNode::privateConstCastStructDType(const AstNode* nodep) { return dynamic_cast<const AstStructDType*>(nodep); }
inline const AstSub* AstNode::privateConstCastSub(const AstNode* nodep) { return dynamic_cast<const AstSub*>(nodep); }
inline const AstSubD* AstNode::privateConstCastSubD(const AstNode* nodep) { return dynamic_cast<const AstSubD*>(nodep); }
inline const AstSysFuncAsTask* AstNode::privateConstCastSysFuncAsTask(const AstNode* nodep) { return dynamic_cast<const AstSysFuncAsTask*>(nodep); }
inline const AstSysIgnore* AstNode::privateConstCastSysIgnore(const AstNode* nodep) { return dynamic_cast<const AstSysIgnore*>(nodep); }
inline const AstSystemF* AstNode::privateConstCastSystemF(const AstNode* nodep) { return dynamic_cast<const AstSystemF*>(nodep); }
inline const AstSystemT* AstNode::privateConstCastSystemT(const AstNode* nodep) { return dynamic_cast<const AstSystemT*>(nodep); }
inline const AstTanD* AstNode::privateConstCastTanD(const AstNode* nodep) { return dynamic_cast<const AstTanD*>(nodep); }
inline const AstTanhD* AstNode::privateConstCastTanhD(const AstNode* nodep) { return dynamic_cast<const AstTanhD*>(nodep); }
inline const AstTask* AstNode::privateConstCastTask(const AstNode* nodep) { return dynamic_cast<const AstTask*>(nodep); }
inline const AstTaskRef* AstNode::privateConstCastTaskRef(const AstNode* nodep) { return dynamic_cast<const AstTaskRef*>(nodep); }
inline const AstTestPlusArgs* AstNode::privateConstCastTestPlusArgs(const AstNode* nodep) { return dynamic_cast<const AstTestPlusArgs*>(nodep); }
inline const AstText* AstNode::privateConstCastText(const AstNode* nodep) { return dynamic_cast<const AstText*>(nodep); }
inline const AstTime* AstNode::privateConstCastTime(const AstNode* nodep) { return dynamic_cast<const AstTime*>(nodep); }
inline const AstTimeD* AstNode::privateConstCastTimeD(const AstNode* nodep) { return dynamic_cast<const AstTimeD*>(nodep); }
inline const AstTopScope* AstNode::privateConstCastTopScope(const AstNode* nodep) { return dynamic_cast<const AstTopScope*>(nodep); }
inline const AstTraceDecl* AstNode::privateConstCastTraceDecl(const AstNode* nodep) { return dynamic_cast<const AstTraceDecl*>(nodep); }
inline const AstTraceInc* AstNode::privateConstCastTraceInc(const AstNode* nodep) { return dynamic_cast<const AstTraceInc*>(nodep); }
inline const AstTypeTable* AstNode::privateConstCastTypeTable(const AstNode* nodep) { return dynamic_cast<const AstTypeTable*>(nodep); }
inline const AstTypedef* AstNode::privateConstCastTypedef(const AstNode* nodep) { return dynamic_cast<const AstTypedef*>(nodep); }
inline const AstTypedefFwd* AstNode::privateConstCastTypedefFwd(const AstNode* nodep) { return dynamic_cast<const AstTypedefFwd*>(nodep); }
inline const AstUCFunc* AstNode::privateConstCastUCFunc(const AstNode* nodep) { return dynamic_cast<const AstUCFunc*>(nodep); }
inline const AstUCStmt* AstNode::privateConstCastUCStmt(const AstNode* nodep) { return dynamic_cast<const AstUCStmt*>(nodep); }
inline const AstUdpTable* AstNode::privateConstCastUdpTable(const AstNode* nodep) { return dynamic_cast<const AstUdpTable*>(nodep); }
inline const AstUdpTableLine* AstNode::privateConstCastUdpTableLine(const AstNode* nodep) { return dynamic_cast<const AstUdpTableLine*>(nodep); }
inline const AstUnionDType* AstNode::privateConstCastUnionDType(const AstNode* nodep) { return dynamic_cast<const AstUnionDType*>(nodep); }
inline const AstUnlinkedRef* AstNode::privateConstCastUnlinkedRef(const AstNode* nodep) { return dynamic_cast<const AstUnlinkedRef*>(nodep); }
inline const AstUnpackArrayDType* AstNode::privateConstCastUnpackArrayDType(const AstNode* nodep) { return dynamic_cast<const AstUnpackArrayDType*>(nodep); }
inline const AstUnsigned* AstNode::privateConstCastUnsigned(const AstNode* nodep) { return dynamic_cast<const AstUnsigned*>(nodep); }
inline const AstUnsizedArrayDType* AstNode::privateConstCastUnsizedArrayDType(const AstNode* nodep) { return dynamic_cast<const AstUnsizedArrayDType*>(nodep); }
inline const AstUnsizedRange* AstNode::privateConstCastUnsizedRange(const AstNode* nodep) { return dynamic_cast<const AstUnsizedRange*>(nodep); }
inline const AstUntilStable* AstNode::privateConstCastUntilStable(const AstNode* nodep) { return dynamic_cast<const AstUntilStable*>(nodep); }
inline const AstVAssert* AstNode::privateConstCastVAssert(const AstNode* nodep) { return dynamic_cast<const AstVAssert*>(nodep); }
inline const AstValuePlusArgs* AstNode::privateConstCastValuePlusArgs(const AstNode* nodep) { return dynamic_cast<const AstValuePlusArgs*>(nodep); }
inline const AstVar* AstNode::privateConstCastVar(const AstNode* nodep) { return dynamic_cast<const AstVar*>(nodep); }
inline const AstVarRef* AstNode::privateConstCastVarRef(const AstNode* nodep) { return dynamic_cast<const AstVarRef*>(nodep); }
inline const AstVarScope* AstNode::privateConstCastVarScope(const AstNode* nodep) { return dynamic_cast<const AstVarScope*>(nodep); }
inline const AstVarXRef* AstNode::privateConstCastVarXRef(const AstNode* nodep) { return dynamic_cast<const AstVarXRef*>(nodep); }
inline const AstWhile* AstNode::privateConstCastWhile(const AstNode* nodep) { return dynamic_cast<const AstWhile*>(nodep); }
inline const AstWordSel* AstNode::privateConstCastWordSel(const AstNode* nodep) { return dynamic_cast<const AstWordSel*>(nodep); }
inline const AstWriteMem* AstNode::privateConstCastWriteMem(const AstNode* nodep) { return dynamic_cast<const AstWriteMem*>(nodep); }
inline const AstXnor* AstNode::privateConstCastXnor(const AstNode* nodep) { return dynamic_cast<const AstXnor*>(nodep); }
inline const AstXor* AstNode::privateConstCastXor(const AstNode* nodep) { return dynamic_cast<const AstXor*>(nodep); }
